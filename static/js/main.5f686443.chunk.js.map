{"version":3,"sources":["store.js","reducers/ProgramReducers.js","reduxtypes.js","reducers/UserDataReducers.js","actions/UserDataActions.js","components/AddItemModal.js","routes/AddBroker.js","utils/Functions.js","routes/AddTopup.js","routes/AddWithdraw.js","routes/AddBuySell.js","routes/AddFX.js","routes/AddFee.js","routes/AddDividend.js","routes/SelectAddType.js","routes/SelectAddTypeTopupWithdrawFX.js","routes/Edit.js","routes/Home.js","actions/ProgramActions.js","routes/Login.js","routes/Logout.js","components/Ribbon.js","components/Notes.js","components/Holdings.js","components/Log.js","components/TopupWithdraw.js","components/BuySell.js","components/DataTable.js","routes/Portfolio.js","routes/Settings.js","routes/About.js","routes/Register.js","components/Menu.js","components/Nav.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","brokerData","state","action","type","broker","id","brokers","user1","payload","listOfProfileData","logs","applyMiddleware","thunk","addToLogs","brokerNameToAddTo","newLog","dispatch","i","length","getBrokerId","data","log","push","brokerName","console","AddItemModal","this","props","show","className","prompt","onClick","closeModal","Component","AddBroker","value","showModal","isValid","validationString","handleChange","bind","handleSubmit","replace","match","setState","event","target","brokerToAdd","name","c","r","Math","random","toString","substring","handleValidation","addToBrokers","preventDefault","updateScreenName","onSubmit","onChange","connect","oldBrokers","newBroker","getFormattedDate","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","substr","AddTopup","pkey","date","notes1","amountSent","rate","amountLanded","notes2","getTopupForm_TYPE_CONVERT","getTopupForm_TYPE_NATIVE","handleChangeAmountSent","handleChangeAmountLanded","handleChangeConversionRate","handleChangeNotes1","handleChangeNotes2","logToAdd","portfolio","currency","formToShow","undefined","topupStyle","baseCurrency","portfolioId","AddWithdraw","handleChangeAmount","getWithdrawForm","AddBuySell","ticker","shares","price","total","showForm","onValueChange","handleChangeShares","handleChangePrice","handleChangeTicker","toFixed","areWeBuyingOrSelling","checked","getBuySellForm","AddFX","fxDirection","targetCurrency","getFXForm","SelectAddType","liClassName","to","SelectAddTypeTopupWithdrawFX","Edit","Home","switchBrokerDataContext","map","key","updatePortfolioContext","renderBrokers","listOfBrokers","Login","Logout","Ribbon","currentTab","tabs","tab","updateCurrentTab","tabName","getTabs","Notes","isModalVisibleClass","isVisible","closeNotes","notes","Holdings","showNotes","holdings","entry","totalBookValue","currentPrice","totalGainsDollars","totalInvested","totalGainsPercent","notesArrow1","openNotes","getRows","Log","period","actionStringClassName","includes","bought","sold","TopupWithdraw","notesArrow2","isNaN","parseInt","toLocaleString","parseFloat","BuySell","sellActionClassName","DataTable","a","showTable","Portfolio","getData","typeOfData","profileData","Settings","About","Register","Menu","toggleMenu","Nav","title","backBtnClassName","menuClassName","isMenuHidden","screen","Footer","App","exact","path","component","from","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f686443.chunk.js","sourcesContent":["import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Reducers\r\nimport { brokersReducer, profileDataReducer } from './reducers/UserDataReducers';\r\nimport { portfolioContextReducer, brokerDataReducer } from './reducers/ProgramReducers';\r\n\r\nconst initialState = {};\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    combineReducers({\r\n        // Program Data . UI Items\r\n        // Program Data . Broker Data\r\n        brokerData: brokerDataReducer, // has your brokers, current broker context (name and id)\r\n\r\n        // User Data . Log Data\r\n        //logs: profileDataReducer, // BEE\r\n        brokers: brokersReducer,\r\n        listOfProfileData: profileDataReducer\r\n    }),\r\n    initialState,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n    );\r\n\r\nexport default store;","import { \r\n    SWITCH_BROKER_DATA_CONTEXT,\r\n} from \"../reduxtypes\";\r\n\r\nexport const brokerDataReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case SWITCH_BROKER_DATA_CONTEXT:\r\n            return { brokerData: action.brokerData, broker: action.broker, id: action.id };\r\n        default: \r\n            return state;\r\n    }\r\n};","// Program Data\r\nexport const SWITCH_BROKER_DATA_CONTEXT = \"SWITCH_BROKER_DATA_CONTEXT\";\r\nexport const FETCH_TOPUPSTYLE = \"FETCH_TOPUPSTYLE\"; // REMOVE THIS AT ONCE --all calls related to this\r\n\r\n// User Data\r\nexport const FETCH_BROKERS = \"FETCH_BROKERS\";\r\nexport const ADD_TO_BROKERS = \"ADD_TO_BROKERS\";\r\nexport const FETCH_LOGS = \"FETCH_LOGS\";\r\nexport const ADD_TO_LOGS = \"ADD_TO_LOGS\";","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from \"../reduxtypes\";\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n\r\nexport const brokersReducer = (state = {brokers: user1.brokers}, action) => { // state = {}\r\n    switch(action.type){\r\n        case FETCH_BROKERS:\r\n            return { brokers: action.payload };\r\n        case ADD_TO_BROKERS:\r\n            return { brokers: action.payload };\r\n        default:\r\n            // retrieving the default store from mock data for the front end mvp app, when we have backend API, state={}\r\n            // Then we manipulate that local copy (FETCH_BROEKRS is only used when we have backend)\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const profileDataReducer = ( state = {listOfProfileData: user1.listOfProfileData}, action ) => { // Hard coded fetching only for the FEE app\r\n    switch(action.type){\r\n        case FETCH_LOGS:\r\n            return { logs: action.payload }; // BEE app fetches specific log for current portfolio\r\n        case ADD_TO_LOGS:\r\n            return { listOfProfileData: action.payload }; // FEE uses listOfProfileData\r\n        default:\r\n            return state;\r\n    }\r\n}","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from '../reduxtypes';\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n// In order to CRUD this mock data, we need to create a local copy within redux store - phase1=brokers, phase2=logs\r\n// so 1. we have local copy data, then manipulate that local copy\r\n// 2. when we have backend api and db, no longer local changes\r\n\r\n// We will use this in the future when making backend API calls // phase1\r\nexport const fetchBrokers = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_BROKERS,\r\n        payload: user1.brokers\r\n    });\r\n}\r\n\r\nexport const addToBrokers = (oldBrokers, newBroker) => dispatch => { // We are only adding the new broker to the local client redux front end store (will be different when we have backend API)\r\n    dispatch({\r\n        type: ADD_TO_BROKERS,\r\n        payload: [\r\n            ...oldBrokers,\r\n            newBroker\r\n        ]\r\n    });\r\n}\r\n\r\n\r\n// To use in BEE app\r\nexport const fetchLogs = (portfolio) => dispatch => {\r\n    switch(portfolio){\r\n        case \"Interactive Brokers\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b1.log\r\n            });\r\n            break;\r\n        case \"Hatch\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b2.log\r\n            });\r\n            break;\r\n        case \"Sharsies\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b3.log\r\n            });\r\n            break;\r\n        default:\r\n            dispatch({\r\n                type: FETCH_LOGS, // TODO: have error throwing reducer\r\n                payload: [{\r\n                    \"type\": \"start\",\r\n                    \"period\": \"Error - User does not have that portfolio / any entries within that portfolio\"\r\n                }]\r\n            })\r\n            console.log(\">> ID DOES NOT EXIST\");\r\n            break;\r\n    }\r\n}\r\n\r\nexport const addToLogs = (listOfProfileData, brokerNameToAddTo, newLog) => dispatch => {\r\n\r\n    // need to take care of immutables\r\n    for(let i = 0; i < listOfProfileData.listOfProfileData.length; i++){\r\n        if(listOfProfileData.listOfProfileData[i].id === getBrokerId(brokerNameToAddTo)){\r\n            listOfProfileData.listOfProfileData[i].data.log.push(newLog);\r\n        }\r\n    }\r\n\r\n    dispatch({\r\n        type: ADD_TO_LOGS,\r\n        payload: listOfProfileData.listOfProfileData\r\n        \r\n    });\r\n}\r\n\r\n// TODO Globalize this function\r\nfunction getBrokerId(brokerName){\r\n    switch(brokerName){\r\n        case 'Interactive Brokers':\r\n            return 'b1';\r\n        case 'Hatch':\r\n            return 'b2';\r\n        case 'Sharsies':\r\n            return 'b3';\r\n        default:\r\n            console.log('> Broker does not exist: ' + brokerName);\r\n            return null;\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport '../styles/AddDataScreens.css';\r\n\r\nclass AddItemModal extends Component{\r\n\r\n    // this.props.show\r\n    // this.props.prompt\r\n    // this.closeModal\r\n\r\n    render(){\r\n        if(this.props.show){\r\n            return(\r\n                <div className=\"AddItemModal\">\r\n                    {this.props.prompt}\r\n                    <button onClick={this.props.closeModal} className=\"closeBtn\">Close</button>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"AddItemModal-hide\" />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default AddItemModal;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    addToBrokers\r\n} from '../actions/UserDataActions';\r\n\r\n// Components\r\nimport AddItemModal from '../components/AddItemModal';\r\n\r\nclass AddBroker extends Component{\r\n\r\n    // this.props.addBroker()\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: '',\r\n            showModal: false,\r\n            isValid: true,\r\n            validationString: 'default-error'\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n\r\n    handleValidation(){\r\n        if(this.state.value==='' || !this.state.value.replace(/\\s/g, '').length) {\r\n            this.setState({ validationString: '*Please enter a broker name' });\r\n            this.setState({isValid: false});\r\n            return false;\r\n        }\r\n\r\n        if(!this.state.value.match(/^[a-z\\d\\-_\\s]+$/i)) {\r\n            this.setState({ validationString: '*Please enter only alphanumeric characters' });\r\n            this.setState({isValid: false});\r\n            return false;\r\n        }\r\n\r\n        this.setState({isValid: true});\r\n        return true;\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({showModal: false});\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        function uuidv4() {\r\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n              return v.toString(16);\r\n            });\r\n        }\r\n\r\n        let brokerToAdd = {\r\n            name: this.state.value,\r\n            id: uuidv4().substring(0, 8)\r\n        };\r\n        \r\n        if(this.handleValidation()){\r\n            this.props.addToBrokers(this.props.brokers, brokerToAdd);\r\n        \r\n            this.setState({showModal: true});\r\n        }\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"addBroker\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"addBroker\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddData AddBroker Screen\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Enter Broker <br/><br/>\r\n                        <p className={this.state.isValid ? \"validation-message-hide\" : \"validation-message\"}>{this.state.validationString}</p>\r\n                        <input type=\"text\" name=\"name\" value={this.state.value} onChange={this.handleChange} className=\"AddDataTextBox\"/>\r\n                    </label>\r\n                    <br/><br/>\r\n                    <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n                </form> \r\n                <AddItemModal show={this.state.showModal} prompt={\"Successfully Added New Broker: \" + this.state.value} closeModal={this.closeModal}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        addToBrokers\r\n    }\r\n)(AddBroker);","export const getFormattedDate = () => {\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0');\r\n    var yyyy = today.getFullYear();\r\n\r\n    return yyyy.toString().substr(2,2) + '-' + mm + '-' + dd;\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getFormattedDate} from '../utils/Functions';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    \r\n} from '../actions/ProgramActions';\r\n\r\nimport {\r\n    addToLogs\r\n} from '../actions/UserDataActions';\r\n\r\n// Components\r\nimport AddItemModal from '../components/AddItemModal';\r\n\r\nclass AddTopup extends Component{\r\n\r\n    // this.props.\r\n\r\n    // Other Notes\r\n    // There are 2 types of topups (so far...)\r\n    // 1. Native (IBKR, Sharsies)\r\n    // 2. Convert (Hatch)\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //// TOPUP SCHEMA\r\n            type: 'reg',\r\n            pkey: 0,\r\n            date: getFormattedDate(),\r\n            action: 'Topup', // TODO: Change to Parameter string from external json constants\r\n            notes1: '', // TODO: Handle notes1 or notes2 - did we arrive on AddTopup Section via log ribbon OR topup/withdraw ribbon ?\r\n\r\n            amountSent: '',\r\n            rate: '',\r\n            amountLanded: '',\r\n            notes2: '',\r\n\r\n            //// PROGRAM DATA\r\n            showModal: false\r\n        }\r\n\r\n        this.getTopupForm_TYPE_CONVERT = this.getTopupForm_TYPE_CONVERT.bind(this);\r\n        this.getTopupForm_TYPE_NATIVE = this.getTopupForm_TYPE_NATIVE.bind(this);\r\n        this.handleChangeAmountSent = this.handleChangeAmountSent.bind(this);\r\n        this.handleChangeAmountLanded = this.handleChangeAmountLanded.bind(this);\r\n        this.handleChangeConversionRate = this.handleChangeConversionRate.bind(this);\r\n        this.handleChangeNotes1 = this.handleChangeNotes1.bind(this);\r\n        this.handleChangeNotes2 = this.handleChangeNotes2.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({showModal: false});\r\n    }\r\n\r\n    handleChangeNotes1(event){\r\n        this.setState({notes1: event.target.value});\r\n    }\r\n\r\n    handleChangeNotes2(event){\r\n        this.setState({notes2: event.target.value});\r\n    }\r\n\r\n    handleChangeConversionRate(event){\r\n        this.setState({rate: event.target.value});\r\n    }\r\n\r\n    handleChangeAmountLanded(event){\r\n        this.setState({amountLanded: event.target.value});\r\n    }\r\n\r\n    handleChangeAmountSent(event){\r\n        this.setState({amountSent: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        let logToAdd = {\r\n            type: 'reg',\r\n            pkey: 0,\r\n            date: getFormattedDate(),\r\n            action: 'Topup',\r\n            notes1: this.state.notes1,\r\n\r\n            amountSent: this.state.amountSent,\r\n            rate: this.state.rate,\r\n            amountLanded: this.state.amountLanded,\r\n            notes2: this.state.notes2\r\n        };\r\n            \r\n        this.props.addToLogs(this.props.listOfProfileData, this.props.portfolio, logToAdd);\r\n\r\n        this.setState({showModal: true});\r\n       \r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddTopup\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddTopup\"); // todo1: create constants\r\n    }\r\n\r\n    // TODO: Add Number Validations\r\n    getTopupForm_TYPE_NATIVE(currency){\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                \r\n                <div className=\"textbox-label\">Topup Amount ({currency})</div>\r\n                <input type=\"number\" name=\"amountSent\" value={this.state.amountSent} onChange={this.handleChangeAmountSent} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Log Screen Notes</div>\r\n                <input type=\"text\" name={\"notes1\"} value={this.state.notes1} onChange={this.handleChangeNotes1} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Topup/Withdraw Screen Notes</div>\r\n                <input type=\"text\" name={\"notes2\"} value={this.state.notes2} onChange={this.handleChangeNotes2} className=\"AddDataTextBox\"/>\r\n            \r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form> \r\n    }\r\n\r\n    // TODO: Add Number Validations\r\n    getTopupForm_TYPE_CONVERT(currency){\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                \r\n                <div className=\"textbox-label\">Amount sent </div>\r\n                <input type=\"number\" name=\"amountSent\" value={this.state.amountSent} onChange={this.handleChangeAmountSent} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Conversion Rate </div>\r\n                <input type=\"number\" name=\"rate\" value={this.state.rate} onChange={this.handleChangeConversionRate} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <button> ⭣ </button>\r\n                <br/><br/>\r\n                \r\n                <div className=\"textbox-label\">Amount Recieved ({currency})</div>\r\n                <input type=\"number\" name=\"amountLanded\" value={this.state.amountLanded} onChange={this.handleChangeAmountLanded} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Log Screen Notes</div>\r\n                <input type=\"text\" name={\"notes1\"} value={this.state.notes1} onChange={this.handleChangeNotes1} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Topup/Withdraw Screen Notes</div>\r\n                <input type=\"text\" name={\"notes2\"} value={this.state.notes2} onChange={this.handleChangeNotes2} className=\"AddDataTextBox\"/>\r\n\r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form>\r\n    }\r\n\r\n    render(){\r\n        let formToShow;\r\n        if(this.props.brokerData === undefined) {\r\n            console.log(\">> Could not find broker data\");\r\n            formToShow = () => <div>No Broker Selected</div>;\r\n        }\r\n        else if(this.props.brokerData.topupStyle === 'native'){\r\n            formToShow = () => this.getTopupForm_TYPE_NATIVE(this.props.brokerData.baseCurrency);\r\n        }\r\n        else if(this.props.brokerData.topupStyle === 'convert'){\r\n            formToShow = () => this.getTopupForm_TYPE_CONVERT(this.props.brokerData.baseCurrency);\r\n        }\r\n        else{\r\n            console.log('>> THAT TOPUP STYLE DOES NOT EXIST');\r\n            formToShow = () => <div> ERROR </div>;\r\n        }\r\n\r\n        return(\r\n            <div className=\"AddData AddTopup Screen\">\r\n                <div className=\"weAreToppingUp weAreAdding\">\r\n                    <h4>{this.props.portfolio}</h4>\r\n                    {formToShow()}\r\n                    <AddItemModal show={this.state.showModal} prompt={\"Successfully Added New Topup Event to \" + this.props.portfolio} closeModal={this.closeModal}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        portfolioId: state.brokerData.id,\r\n        portfolio: state.brokerData.broker,\r\n        brokers: state.brokers.brokers,\r\n        brokerData: state.brokerData.brokerData,\r\n\r\n        // BEE backend db logs\r\n        // logs: state.logs.logs // care at logs vs log lol\r\n\r\n        // FEE local redux logs\r\n        listOfProfileData: state.listOfProfileData\r\n    }),\r\n    {\r\n        addToLogs\r\n    }\r\n)(AddTopup);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getFormattedDate} from '../utils/Functions';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    \r\n} from '../actions/ProgramActions';\r\n\r\nimport {\r\n    addToLogs\r\n} from '../actions/UserDataActions';\r\n\r\n// Components\r\nimport AddItemModal from '../components/AddItemModal';\r\n\r\nclass AddWithdraw extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //// WITHDRAW SCHEMA\r\n            type: 'reg',\r\n            pkey: 0,\r\n            date: getFormattedDate(),\r\n            action: 'Withdraw', // TODO: Change to Parameter string from external json constants\r\n            notes1: '', // TODO: Handle notes1 or notes2 - did we arrive on AddTopup Section via log ribbon OR topup/withdraw ribbon ?\r\n\r\n            amountSent: '',\r\n            notes2: '',\r\n\r\n            //// PROGRAM DATA\r\n            showModal: false\r\n        };\r\n\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.handleChangeAmount = this.handleChangeAmount.bind(this);\r\n        this.handleChangeNotes1 = this.handleChangeNotes1.bind(this);\r\n        this.handleChangeNotes2 = this.handleChangeNotes2.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({showModal: false});\r\n    }\r\n\r\n    handleChangeAmount(event){\r\n        this.setState({amountSent: event.target.value});\r\n    }\r\n\r\n    handleChangeNotes2(event){\r\n        this.setState({notes2: event.target.value}); // NOTES1\r\n    }\r\n\r\n    handleChangeNotes1(event){\r\n        this.setState({notes1: event.target.value}); // NOTES1\r\n    }\r\n\r\n    handleSubmit(event){\r\n        let logToAdd = {\r\n            type: 'reg',\r\n            pkey: 0,\r\n            date: getFormattedDate(),\r\n            action: 'Withdraw',\r\n            notes1: this.state.notes1,\r\n\r\n            amountSent: this.state.amountSent,\r\n            notes2: this.state.notes2 // TODO notes2 implementation\r\n        };\r\n            \r\n        this.props.addToLogs(this.props.listOfProfileData, this.props.portfolio, logToAdd);\r\n\r\n        this.setState({showModal: true});\r\n       \r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddWithdraw\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddWithdraw\"); // todo1: create constants\r\n    }\r\n    \r\n    getWithdrawForm(){        \r\n        if(this.props.brokerData === undefined) {\r\n            console.log(\">> Could not find broker data\");\r\n            return <div>No Broker Selected</div>;\r\n        }\r\n\r\n        // TODO: MUST HANDLE 'CONVERT' TOPUP STYLE WITHDRAWALS\r\n\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                \r\n                <div className=\"textbox-label\">Withdraw Amount ({this.props.brokerData.baseCurrency})</div>\r\n                <input type=\"number\" name=\"amountSent\" value={this.state.amountSent} onChange={this.handleChangeAmount} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Notes for Main Log</div>\r\n                <input type=\"text\" name=\"notes1\" value={this.state.notes1} onChange={this.handleChangeNotes1} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Notes for Topup/Withdraw Log</div>\r\n                <input type=\"text\" name=\"notes2\" value={this.state.notes2} onChange={this.handleChangeNotes2} className=\"AddDataTextBox\"/>\r\n            \r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form> \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddData AddWithdraw Screen\">\r\n                <div className=\"weAreWithdrawing weAreAdding\">\r\n                    <h4>{this.props.portfolio}</h4>\r\n                    {this.getWithdrawForm()}\r\n                    <AddItemModal show={this.state.showModal} prompt={\"Successfully Added New Topup Event to \" + this.props.portfolio} closeModal={this.closeModal}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        portfolioId: state.brokerData.id,\r\n        portfolio: state.brokerData.broker,\r\n        brokers: state.brokers.brokers,\r\n        brokerData: state.brokerData.brokerData,\r\n\r\n        // BEE backend db logs\r\n        // logs: state.logs.logs // care at logs vs log lol\r\n\r\n        // FEE local redux logs\r\n        listOfProfileData: state.listOfProfileData\r\n    }),\r\n    {\r\n        addToLogs\r\n    }\r\n)(AddWithdraw);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getFormattedDate} from '../utils/Functions';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    \r\n} from '../actions/ProgramActions';\r\n\r\nimport {\r\n    addToLogs\r\n} from '../actions/UserDataActions';\r\n\r\n// Components\r\nimport AddItemModal from '../components/AddItemModal';\r\n\r\nclass AddBuySell extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //// BUY/SELL Schema\r\n            type: 'reg',\r\n            pkey: 0,\r\n            date: getFormattedDate(),\r\n            action: 'BUY', \r\n            ticker: '',\r\n            notes1: '', \r\n            \r\n            shares: 100,\r\n            price: 0,\r\n            total: 0,\r\n            notes2: '', \r\n\r\n            //// PROGRAM DATA\r\n            showForm: false,\r\n            showModal: false\r\n        };\r\n\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChangeShares = this.handleChangeShares.bind(this);\r\n        this.handleChangePrice = this.handleChangePrice.bind(this);\r\n        this.handleChangeTicker = this.handleChangeTicker.bind(this);\r\n        this.handleChangeNotes1 = this.handleChangeNotes1.bind(this);\r\n        this.handleChangeNotes2 = this.handleChangeNotes2.bind(this);\r\n    }\r\n\r\n    handleSubmit(event){\r\n        let logToAdd = {\r\n            type: 'reg',\r\n            pkey: 0,\r\n            date: getFormattedDate(),\r\n            action: this.state.action,\r\n            ticker: this.state.ticker,\r\n            notes1: this.state.notes1,\r\n\r\n            shares: this.state.shares,\r\n            price: this.state.price,\r\n            total: this.state.total,\r\n            notes2: this.state.notes2\r\n        };\r\n            \r\n        this.props.addToLogs(this.props.listOfProfileData, this.props.portfolio, logToAdd);\r\n\r\n        this.setState({showModal: true});\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    // Assuming BuySell is always target currency and not base currency\r\n    getBuySellForm(){\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n\r\n                <div className=\"textbox-label\"> Ticker Symbol </div>\r\n                <input \r\n                type=\"text\" \r\n                name=\"ticker\"\r\n                value={this.state.ticker}\r\n                onChange={this.handleChangeTicker} \r\n                className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n                \r\n                <div className=\"textbox-label\"> Shares </div>\r\n                <input \r\n                type=\"number\" \r\n                name=\"shares\"\r\n                value={this.state.shares}\r\n                onChange={this.handleChangeShares} \r\n                className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Price </div>\r\n                <input \r\n                type=\"number\" \r\n                name=\"price\"\r\n                value={this.state.price} \r\n                onChange={this.handleChangePrice} \r\n                className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Total</div>\r\n                <div>{this.state.total.toFixed(4)}</div>\r\n                <br/>\r\n\r\n                <div className=\"textbox-label\">Notes for Main Log</div>\r\n                <input type=\"text\" name=\"notes1\" value={this.state.notes1} onChange={this.handleChangeNotes1} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Notes for Buy/Sell Log</div>\r\n                <input type=\"text\" name=\"notes2\" value={this.state.notes2} onChange={this.handleChangeNotes2} className=\"AddDataTextBox\"/>\r\n            \r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form> \r\n    }\r\n\r\n    handleChangeTicker(event){\r\n        this.setState({ticker: event.target.value});\r\n    }\r\n\r\n    handleChangeShares(event){\r\n        this.setState({shares: event.target.value, total: this.state.price * event.target.value});\r\n    }\r\n\r\n    handleChangePrice(event){\r\n        this.setState({price: event.target.value, total: this.state.shares * event.target.value});\r\n    }\r\n    \r\n    onValueChange(event){\r\n        this.setState({action: event.target.value});\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({showModal: false});\r\n    }\r\n    \r\n    handleChangeNotes1(event){\r\n        this.setState({notes1: event.target.value});\r\n    }\r\n\r\n    handleChangeNotes2(event){\r\n        this.setState({notes2: event.target.value});\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddBuySell\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddBuySell\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        if(this.props.brokerData === undefined) {\r\n            console.log(\">> [AddBuySell] Could not find broker data\");\r\n            return <div className=\"AddBuySell AddFX Screen\"> No Broker Selected </div>;\r\n        }\r\n\r\n        let areWeBuyingOrSelling = this.state.action === 'BUY' ? \" weAreBuying \":\" weAreSelling \";\r\n\r\n        return(\r\n            <div className=\" AddBuySell Screen \">\r\n                <div className={areWeBuyingOrSelling + \" weAreAdding\"}>\r\n                    <h4>{this.props.portfolio}</h4>\r\n                    <div>\r\n                        <label>\r\n                            <input type=\"radio\" value=\"BUY\" checked={this.state.action === \"BUY\"} onChange={this.onValueChange}/> \r\n                            BUY\r\n                        </label>\r\n                        <label>\r\n                            <input type=\"radio\" value=\"SELL\" checked={this.state.action === \"SELL\"} onChange={this.onValueChange}/>\r\n                            SELL\r\n                        </label>\r\n                    </div>\r\n                    \r\n                    <br/>\r\n\r\n                    {this.getBuySellForm()}\r\n                    <AddItemModal show={this.state.showModal} prompt={\"Successfully Added New \" + this.state.action + \" event to \" + this.props.portfolio} closeModal={this.closeModal}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        portfolioId: state.brokerData.id,\r\n        portfolio: state.brokerData.broker,\r\n        brokerData: state.brokerData.brokerData,\r\n\r\n        listOfProfileData: state.listOfProfileData\r\n    }),\r\n    {\r\n        addToLogs\r\n    }\r\n)(AddBuySell);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getFormattedDate} from '../utils/Functions';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    \r\n} from '../actions/ProgramActions';\r\n\r\nimport {\r\n    addToLogs\r\n} from '../actions/UserDataActions';\r\n\r\n// Components\r\nimport AddItemModal from '../components/AddItemModal';\r\n\r\nclass AddFX extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            //// FX Schema\r\n            type: 'reg',\r\n            pkey: 0,\r\n            date: getFormattedDate(),\r\n            action: 'FX', \r\n            notes1: '', \r\n\r\n            amountSent: '',\r\n            rate: '',\r\n            amountLanded: '',\r\n            notes2: '', \r\n\r\n            //// PROGRAM DATA\r\n            fxDirection: 'RIGHT',\r\n            showForm: false,\r\n            showModal: false\r\n        };\r\n\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChangeAmountSent = this.handleChangeAmountSent.bind(this);\r\n        this.handleChangeAmountLanded = this.handleChangeAmountLanded.bind(this);\r\n        this.handleChangeConversionRate = this.handleChangeConversionRate.bind(this);\r\n        this.handleChangeNotes1 = this.handleChangeNotes1.bind(this);\r\n        this.handleChangeNotes2 = this.handleChangeNotes2.bind(this);\r\n    }\r\n\r\n    handleSubmit(event){\r\n        let logToAdd = {\r\n            type: 'reg',\r\n            pkey: 0,\r\n            date: getFormattedDate(),\r\n            action: 'FX ' + (this.state.fxDirection === 'RIGHT' ? this.props.brokerData.targetCurrency : this.props.brokerData.baseCurrency),\r\n            notes1: this.state.notes1,\r\n\r\n            amountSent: this.state.amountSent,\r\n            rate: this.state.rate,\r\n            amountLanded: this.state.amountLanded,\r\n            notes2: this.state.notes2\r\n        };\r\n            \r\n        this.props.addToLogs(this.props.listOfProfileData, this.props.portfolio, logToAdd);\r\n\r\n        this.setState({showModal: true});\r\n       \r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChangeNotes1(event){\r\n        this.setState({notes1: event.target.value});\r\n    }\r\n\r\n    handleChangeNotes2(event){\r\n        this.setState({notes2: event.target.value});\r\n    }\r\n\r\n    handleChangeConversionRate(event){\r\n        this.setState({rate: event.target.value});\r\n    }\r\n\r\n    handleChangeAmountLanded(event){\r\n        this.setState({amountLanded: event.target.value});\r\n    }\r\n\r\n    handleChangeAmountSent(event){\r\n        this.setState({amountSent: event.target.value});\r\n    }\r\n\r\n    onValueChange(event){\r\n        this.setState({fxDirection: event.target.value});\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({showModal: false});\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddFX\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddFX\"); // todo1: create constants\r\n    }\r\n\r\n    getFXForm(){\r\n        let fxDirection = this.state.fxDirection;\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                \r\n                <div className=\"textbox-label\">From ({fxDirection==='RIGHT' ? this.props.brokerData.baseCurrency : this.props.brokerData.targetCurrency})</div>\r\n                <input \r\n                type=\"number\" \r\n                name={fxDirection==='RIGHT' ? 'amountSent' : 'amountLanded'} \r\n                value={fxDirection==='RIGHT' ? this.state.amountSent : this.state.amountLanded} \r\n                onChange={fxDirection==='RIGHT' ? this.handleChangeAmountSent : this.handleChangeAmountLanded} \r\n                className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Conversion Rate </div>\r\n                <input \r\n                type=\"number\" \r\n                name=\"rate\" \r\n                value={this.state.rate} \r\n                onChange={this.handleChangeConversionRate} \r\n                className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">To ({fxDirection==='RIGHT' ? this.props.brokerData.targetCurrency : this.props.brokerData.baseCurrency})</div>\r\n                <input \r\n                type=\"number\" \r\n                name={fxDirection==='RIGHT' ? 'amountLanded' : 'amountSent'} \r\n                value={fxDirection==='RIGHT' ? this.state.amountLanded : this.state.amountSent} \r\n                onChange={fxDirection==='RIGHT' ? this.handleChangeAmountLanded : this.handleChangeAmountSent} \r\n                className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Notes for Main Log</div>\r\n                <input type=\"text\" name=\"notes1\" value={this.state.notes1} onChange={this.handleChangeNotes1} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                <div className=\"textbox-label\">Notes for Topup/Withdraw Log</div>\r\n                <input type=\"text\" name=\"notes2\" value={this.state.notes2} onChange={this.handleChangeNotes2} className=\"AddDataTextBox\"/>\r\n            \r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form> \r\n    }\r\n\r\n    render(){\r\n        if(this.props.brokerData === undefined) {\r\n            console.log(\">> Could not find broker data\");\r\n            return <div className=\"AddData AddFX Screen\"> No Broker Selected </div>;\r\n        }\r\n\r\n        return(\r\n            <div className=\"AddData AddFX Screen\">\r\n                <div className=\"weAreFXing weAreAdding\">\r\n                    <h4>{this.props.portfolio}</h4>\r\n                    <div>\r\n                        <label>\r\n                            <input type=\"radio\" value=\"RIGHT\" checked={this.state.fxDirection === \"RIGHT\"} onChange={this.onValueChange}/> \r\n                            {this.props.brokerData.baseCurrency} to {this.props.brokerData.targetCurrency}\r\n                        </label>\r\n                        <label>\r\n                            <input type=\"radio\" value=\"LEFT\" checked={this.state.fxDirection === \"LEFT\"} onChange={this.onValueChange}/>\r\n                            {this.props.brokerData.targetCurrency} to {this.props.brokerData.baseCurrency}\r\n                        </label>\r\n                    </div>\r\n                    \r\n                    <br/>\r\n\r\n                    {this.getFXForm()}\r\n                    <AddItemModal show={this.state.showModal} prompt={\"Successfully Added New FX Event to \" + this.props.portfolio} closeModal={this.closeModal}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        portfolioId: state.brokerData.id,\r\n        portfolio: state.brokerData.broker,\r\n        brokerData: state.brokerData.brokerData,\r\n\r\n        listOfProfileData: state.listOfProfileData\r\n    }),\r\n    {\r\n        addToLogs\r\n    }\r\n)(AddFX);","import React, {Component} from 'react';\r\n\r\nclass AddFee extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddFee\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddFee\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddFee Screen\">\r\n                AddFee works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddFee;","import React, {Component} from 'react';\r\n\r\nclass AddDividend extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddDividend\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddDividend\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddDividend Screen\">\r\n                AddDividend works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddDividend;","import React, {Component} from 'react';\r\nimport '../styles/SelectAddType.css';\r\n\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\n\r\nclass SelectAddType extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"selectaddtype\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"selectaddtype\"); // todo1: create constants\r\n    }\r\n\r\n    // TODO: Enumerate in external constants file\r\n    render(){\r\n        let liClassName = \"SelectAddType-li\";\r\n        return(\r\n            <div className=\"SelectAddType Screen\">\r\n                <h4> Select Type of Log </h4>\r\n                <ul className=\"SelectAddType-ul\">\r\n                    <Link to={'/AddTopup'}><li className={liClassName+\" AddTopup-li\"}> 1. Topup </li></Link>\r\n                    <Link to={'/AddWithdraw'}><li className={liClassName+\" AddWithdraw-li\"}> 2. Withdraw </li></Link>\r\n                    <Link to={'/AddFX'}><li className={liClassName+\" AddFX-li\"}> 3. FX </li></Link>\r\n                    <Link to={'/AddBuySell'}><li className={liClassName+\" AddBuySell-li\"}> 4. Buy or Sell</li></Link>\r\n                    <Link to={'/AddDividend'}><li className={liClassName+\" AddDividend-li\"}> 6. Dividend </li></Link>\r\n                    <Link to={'/AddFee'}><li className={liClassName+\" AddFee-li\"}> 7. Fee </li></Link>\r\n\r\n                    <Link to={'/'}><li className={liClassName+\" \"}> 8. New Period </li></Link>\r\n                    <Link to={'/'}><li className={liClassName+\" \"}> 9. End Period </li></Link>\r\n                    <Link to={'/'}><li className={liClassName+\" \"}> 10. Period Bought </li></Link>\r\n                    <Link to={'/'}><li className={liClassName+\" \"}> 11. Period Sold </li></Link>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectAddType;","import React, {Component} from 'react';\r\nimport '../styles/SelectAddType.css';\r\n\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\n\r\nclass SelectAddTypeTopupWithdrawFX extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"selectaddtype\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"selectaddtype\"); // todo1: create constants\r\n    }\r\n\r\n    // TODO: Enumerate in external constants file\r\n    render(){\r\n        let liClassName = \"SelectAddType-li\";\r\n        return(\r\n            <div className=\"SelectAddType Screen\">\r\n                <h4> Select Type to Add </h4>\r\n                <ul className=\"SelectAddType-ul\">\r\n                    <Link to={'/AddTopup'}><li className={liClassName+\" AddTopup-li\"}> 1. Topup </li></Link>\r\n                    <Link to={'/AddWithdraw'}><li className={liClassName+\" AddWithdraw-li\"}> 2. Withdraw </li></Link>\r\n                    <Link to={'/AddFX'}><li className={liClassName+\" AddFX-li\"}> 3. FX </li></Link>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectAddTypeTopupWithdrawFX;","import React, {Component} from 'react';\r\n\r\nclass Edit extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Edit Screen\">\r\n                Edit works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Edit;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Home.css';\r\n\r\n// Redux\r\nimport { \r\n    // fetchBrokers,\r\n} from '../actions/UserDataActions';\r\n\r\nimport { \r\n    switchBrokerDataContext\r\n} from '../actions/ProgramActions';\r\n\r\nclass Home extends Component{\r\n\r\n    // this.props.<redux>\r\n    // this.props.updateScreenName()\r\n\r\n    componentDidMount(){\r\n        // this.props.fetchBrokers(); // To use when we have backend API implemented\r\n        this.props.updateScreenName(\"home\");\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"home\"); // todo1: create constants\r\n    }\r\n\r\n    updatePortfolioContext(brokerName, id){\r\n        this.props.switchBrokerDataContext(this.props.brokers, brokerName, id);\r\n    }\r\n\r\n    renderBrokers(){\r\n        if(this.props.brokers === undefined) return \"Loading Brokers\";\r\n        \r\n        return this.props.brokers.map( (broker, i) => {\r\n            return <ul key={i} className=\"Brokers\">\r\n                <Link to={'/Portfolio'}>\r\n                    <li onClick={ () => this.updatePortfolioContext(broker.name, broker.id)} className=\"Broker\">{broker.name}</li>\r\n                </Link>\r\n            </ul>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Home Screen\">\r\n                <div className=\"Brokers\">\r\n                    {this.renderBrokers()}\r\n                </div>\r\n                <div className=\"AddBrokerBtn-wrapper\">\r\n                    <Link to={'/AddBroker'}>\r\n                        <button className=\"AddBtn\">+</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers,\r\n    }),\r\n    {\r\n        switchBrokerDataContext\r\n        // fetchBrokers\r\n    }\r\n)(Home);","import { \r\n    SWITCH_BROKER_DATA_CONTEXT,\r\n} from '../reduxtypes';\r\n\r\nexport const switchBrokerDataContext = (listOfBrokers, broker, id) => dispatch => {\r\n    let brokerData = {};\r\n    for(let i = 0; i < listOfBrokers.length; i++){\r\n        if(listOfBrokers[i].id === id) brokerData = listOfBrokers[i];\r\n        break;\r\n    }\r\n\r\n    dispatch({\r\n        type: SWITCH_BROKER_DATA_CONTEXT,\r\n        brokerData: brokerData,\r\n        broker: broker,\r\n        id: id\r\n    });\r\n}","import React, {Component} from 'react';\r\n\r\nclass Login extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"login\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"login\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Login Screen\">\r\n                Login works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\n\r\nclass Logout extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"logout\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"logout\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Logout Screen\">\r\n                Logout works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logout;","import React, {Component} from 'react';\r\nimport '../styles/Ribbon.css';\r\n\r\nclass Ribbon extends Component {\r\n\r\n    // this.props.updateCurrentTab()\r\n    // this.props.currentTab\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentTab: \"\",\r\n            tabs: [ // todo: Get from user data\r\n                \"Master\",\r\n                \"Holdings\",\r\n                \"Log\",\r\n                \"Topup / Withdraw\",\r\n                \"Buy / Sell\",\r\n                \"Fees\",\r\n                \"Dividends\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.state.currentTab !== this.props.currentTab) this.setState({currentTab: this.props.currentTab});\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n        this.props.updateCurrentTab(tab);\r\n    }\r\n\r\n    getTabs(){\r\n        let defaultClass = \"Tab-inner \";\r\n        let highlightedClass = \" Tab-inner-highlighted\";\r\n        return this.state.tabs.map((tabName, i) => {\r\n            return <li onClick={ () => this.updateCurrentTab(tabName)} className=\"Tab\" key={i}>\r\n                <span className={defaultClass + (tabName === this.state.currentTab ? highlightedClass : \"\")}>{tabName}</span>\r\n            </li>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Ribbon\">\r\n                <ul className=\"Tabs\">\r\n                    {this.getTabs()}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ribbon;","import React, {Component} from 'react';\r\nimport '../styles/Notes.css';\r\n\r\nexport default class Notes extends Component {\r\n    \r\n    // this.props.notes\r\n    // this.props.isVisible\r\n    // this.props.closeNotes\r\n\r\n    render(){\r\n        let isModalVisibleClass = this.props.isVisible ? \" Notes \" : \" Notes-hide \";\r\n\r\n        return(\r\n            <div className={isModalVisibleClass}>\r\n                <div className=\" Notes-exit \" onClick={this.props.closeNotes}>\r\n                    x\r\n                </div>\r\n                <div className=\"Notes-content\">\r\n                    <div>{this.props.notes}</div>\r\n                    <div><button>Edit</button></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/DataTable.css';\r\n\r\n// Redux\r\nimport {connect} from 'react-redux';\r\n\r\n// Components \r\nimport Notes from './Notes';\r\n\r\nclass Holdings extends Component {\r\n\r\n    // this.props.holdings\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: ''\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getRows(){\r\n        return this.props.holdings.map( (entry, i) => {\r\n            let totalBookValue = (entry.shares * entry.currentPrice).toFixed(4);\r\n            let totalGainsDollars = (totalBookValue - entry.totalInvested).toFixed(4);\r\n            let totalGainsPercent = ((totalGainsDollars/entry.totalInvested)*100).toFixed(2);\r\n\r\n            let notesArrow1 = entry.notes1 === '' ? '' : '⭦';\r\n\r\n            return <tr key={i}>\r\n                <td>{entry.ticker}</td>\r\n                <td>//DIST</td>\r\n                <td>{entry.shares.toFixed(4)}</td>\r\n                <td>{entry.totalInvested.toFixed(4)}</td>\r\n                <td>{entry.currentPrice.toFixed(4)}</td>\r\n                <td>{totalBookValue}</td>\r\n                <td>{totalGainsDollars}</td>\r\n                <td>{totalGainsPercent}%</td>\r\n                <td>//GAIN%</td>\r\n                <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> {notesArrow1} </td>\r\n            </tr>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        if(this.props.holdings === undefined) return <div>No Holdings to show / Broker not selected</div>;\r\n\r\n        return(\r\n            <div>\r\n                <h4>Current Holdings Summary</h4>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ticker Symbol</th>\r\n                            <th>% Distribution</th>\r\n                            <th>Shares</th>\r\n                            <th>Total Invested</th>\r\n                            <th>Curr Price</th>\r\n                            <th>Total Book</th>\r\n                            <th>$ G/L</th>\r\n                            <th>% G/L</th>\r\n                            <th>% of Gains</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getRows()}\r\n                    </tbody>\r\n                </table>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        brokerData: state.brokerData.brokerData\r\n    }),\r\n    {\r\n\r\n    }\r\n)(Holdings);","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/DataTable.css';\r\n\r\n// Redux\r\nimport {connect} from 'react-redux';\r\n\r\n// Components \r\nimport Notes from './Notes';\r\n\r\nclass Log extends Component {\r\n    \r\n    // this.props.logs\r\n    // this.props.portfolio\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: ''\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getRows(){\r\n        return this.props.logs.map( (entry, i) => {\r\n            let notesArrow1 = entry.notes1 === '' ? '' : '⭦';\r\n\r\n            if(entry.type === \"start\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> {notesArrow1} </td>\r\n                    <td className=\"Edit-row\">⚙</td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"reg\"){\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"BUY\")){\r\n                    actionStringClassName = \" Buy \";\r\n                }\r\n                else if(entry.action.includes(\"SELL\")){\r\n                    actionStringClassName = \" Sell \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"Dividend\")){\r\n                    actionStringClassName = \" Dividend \";\r\n                }\r\n                else if(entry.action.includes(\"Fee\")){\r\n                    actionStringClassName = \" Fee \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    \r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    \r\n                    <td>{entry.ticker}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> {notesArrow1} </td>\r\n                    <td className=\"Edit-row\">⚙</td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end1\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>BOUGHT</b></td>\r\n                    <td>{entry.bought}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> {notesArrow1} </td>\r\n                    <td className=\"Edit-row\">⚙</td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end2\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>SOLD</b></td>\r\n                    <td>{entry.sold}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> {notesArrow1} </td>\r\n                    <td className=\"Edit-row\">⚙</td>\r\n                </tr>\r\n            }\r\n            else{\r\n                // This can be here since log captures ALL types of activity\r\n                console.log(\"> ERROR: LOG TYPE DOES NOT EXIST: \" + entry.type);\r\n                return <tr><td>ERROR</td></tr>;\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        if(this.props.brokerData === undefined) return <div>No Data to show / Broker not selected</div>;\r\n\r\n        return(\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ref</th>\r\n                            <th>Date</th>\r\n                            <th>Action</th>\r\n                            <th>Symbol</th>\r\n                            <th>Notes</th>\r\n                            <th className=\"Edit-row\">Edit</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getRows()}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <Link to={'/SelectAddType'}>\r\n                    <div className=\"AddLogBtn-wrapper\">\r\n                        <button className=\"AddBtn\">+</button>\r\n                    </div>\r\n                </Link>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        brokerData: state.brokerData.brokerData\r\n    }),\r\n    {\r\n\r\n    }\r\n)(Log);","import React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/DataTable.css';\r\n\r\n// Redux\r\nimport {connect} from 'react-redux';\r\n\r\n// Components\r\nimport Notes from './Notes';\r\n\r\nclass TopupWithdraw extends Component{\r\n\r\n    // this.props.logs\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: ''\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getRows(){\r\n        return this.props.logs.map ((entry, i) => {\r\n            let notesArrow1 = entry.notes1 === '' ? '' : '⭦';\r\n            let notesArrow2 = entry.notes2 === '' ? '' : '⭦';\r\n\r\n            if(entry.type === \"end1\" || entry.type === \"end2\") {\r\n                // Continue;\r\n            }\r\n\r\n            else if(entry.type === \"start\"){ // TODO: REFACTOR START ROWS\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> {notesArrow1} </td>\r\n                    <td className=\"Edit-row\">⚙</td>\r\n            </tr>\r\n            }\r\n            \r\n            else if(entry.action.includes(\"Topup\") ||\r\n            entry.action.includes(\"Withdraw\") ||\r\n            entry.action.includes(\"FX\")){ // TODO: KEEP CONSTANTS AND SCHEMA AS CASE SENSITIVE\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n            \r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    <td>{entry.amountSent === undefined || isNaN(parseInt(entry.amountSent)) ? '' : entry.amountSent.toLocaleString()}</td>\r\n                    <td>{entry.rate === undefined || isNaN(parseFloat(entry.rate)) ? '' : parseFloat(entry.rate).toFixed(4)}</td>\r\n                    <td>{entry.amountLanded === undefined || isNaN(parseInt(entry.amountLanded)) ? '' : entry.amountLanded.toLocaleString()}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes2)}> {notesArrow2} </td>\r\n                    <td className=\"Edit-row\">⚙</td>\r\n                </tr>\r\n            }\r\n            \r\n            return;\r\n        });\r\n    }\r\n\r\n    render(){\r\n        if(this.props.brokerData === undefined) return <div>No Data to show / Broker not selected</div>;\r\n        \r\n        return(\r\n            <div>\r\n                <div>\r\n                    <p>Total {this.props.brokerData.baseCurrency}: </p>\r\n                    <p>Total {this.props.brokerData.targetCurrency}: </p>\r\n                </div>\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Ref</th>\r\n                        <th className=\"Date-topup-withdraw\">Date</th>\r\n                        <th>Action</th>\r\n                        <th>{this.props.brokerData.baseCurrency}</th>\r\n                        <th>Rate</th>\r\n                        <th>{this.props.brokerData.targetCurrency}</th>\r\n                        <th>Notes</th>\r\n                        <th className=\"Edit-row\">Edit</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getRows()}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <Link to={'/SelectAddTypeTopupWithdrawFX'}>\r\n                    <div className=\"AddLogBtn-wrapper\">\r\n                        <button className=\"AddBtn\">+</button>\r\n                    </div>\r\n                </Link>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        brokerData: state.brokerData.brokerData\r\n    }),\r\n    {\r\n\r\n    }\r\n)(TopupWithdraw);","import React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/DataTable.css';\r\n\r\n// Redux\r\nimport {connect} from 'react-redux';\r\n\r\n// Components\r\nimport Notes from './Notes';\r\n\r\nclass BuySell extends Component{\r\n\r\n    // this.props.logs\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: ''\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getRows(){\r\n        return this.props.logs.map ((entry, i) => {\r\n            let notesArrow1 = entry.notes1 === '' ? '' : '⭦';\r\n            let notesArrow2 = entry.notes2 === '' ? '' : '⭦';\r\n\r\n            if(entry.type === \"end1\" || entry.type === \"end2\" || entry.type === 'start') {\r\n                // Continue;\r\n            }\r\n            \r\n            else if(entry.action.includes('BUY') ||\r\n            entry.action.includes('SELL')){ // TODO: KEEP CONSTANTS AND SCHEMA AS CASE SENSITIVE\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n                let sellActionClassName = \" \";\r\n\r\n                if(entry.action.includes(\"BUY\")){\r\n                    actionStringClassName = \" Buy \";\r\n                }\r\n                else if(entry.action.includes(\"SELL\")){\r\n                    actionStringClassName = \" Sell \";\r\n                    sellActionClassName = \" Sell \";\r\n                }\r\n            \r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    <td className={sellActionClassName}>{entry.ticker}</td>\r\n                    <td className={sellActionClassName}>{parseFloat(entry.shares).toFixed(4).toLocaleString()}</td>\r\n                    <td className={sellActionClassName}>{parseFloat(entry.price).toFixed(4).toLocaleString()}</td>\r\n                    <td className={sellActionClassName}>{parseFloat(entry.total).toFixed(4).toLocaleString()}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes2)}> {notesArrow2} </td>\r\n                    <td className=\"Edit-row\">⚙</td>\r\n                </tr>\r\n            }\r\n            \r\n            return;\r\n        });\r\n    }\r\n\r\n    render(){\r\n        if(this.props.brokerData === undefined) return <div>No Data to show / Broker not selected</div>;\r\n\r\n        return(\r\n            <div>\r\n                <div>\r\n                    <p>Total NZD Est. Invested= </p>\r\n                    <p>Total USD Invested= </p>\r\n                    <p> seed= </p>\r\n                </div>\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Ref</th>\r\n                        <th>Date</th>\r\n                        <th>Action</th>\r\n                        <th>Ticker</th>\r\n                        <th>Shares</th>\r\n                        <th>Price</th>\r\n                        <th>Total Price</th>\r\n                        <th>Notes</th>\r\n                        <th className=\"Edit-row\">Edit</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getRows()}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <Link to={'/AddBuySell'}>\r\n                    <div className=\"AddLogBtn-wrapper\">\r\n                        <button className=\"AddBtn\">+</button>\r\n                    </div>\r\n                </Link>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        brokerData: state.brokerData.brokerData\r\n    }),\r\n    {\r\n\r\n    }\r\n)(BuySell);","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\n// Components\r\nimport Holdings from './Holdings';\r\nimport Log from './Log';\r\nimport TopupWithdraw from './TopupWithdraw';\r\nimport BuySell from './BuySell';\r\n\r\nclass DataTable extends Component {\r\n\r\n    // this.props.currentTab\r\n    // this.props.logs\r\n    // this.props.holdings\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            a: 1\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let showTable = () => { return \"n/a\" };\r\n    \r\n        switch(this.props.currentTab){\r\n            case \"Log\":\r\n                showTable = () => { return <Log logs={this.props.logs}/> }\r\n                break;\r\n            case \"Topup / Withdraw\":\r\n                showTable = () => { return <TopupWithdraw logs={this.props.logs}/> }\r\n                break;\r\n            case \"Buy / Sell\":\r\n                showTable = () => {return <BuySell logs={this.props.logs} />}\r\n                break;\r\n            case \"Holdings\":\r\n                showTable = () => {return <Holdings holdings={this.props.holdings}/>}\r\n                break;\r\n            default:\r\n                showTable = () => { return \"Invalid Choice\" }\r\n                break;\r\n        }\r\n\r\n        return(\r\n            <div className=\"DataTable\">\r\n                {showTable()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataTable;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Portfolio.css';\r\n\r\n// Redux\r\nimport {\r\n    \r\n} from '../actions/UserDataActions';\r\n\r\n// Components\r\nimport Ribbon from '../components/Ribbon';\r\nimport DataTable from '../components/DataTable';\r\n\r\nclass Portfolio extends Component{\r\n\r\n    // this.props.<redux>\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTab: \"Log\"\r\n        }\r\n\r\n        this.getData = this.getData.bind(this);\r\n        this.updateCurrentTab = this.updateCurrentTab.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"portfolio\"); // Hacky\r\n        // this.props.fetchLogs(this.props.portfolio); // Use for BEE app // FEE app uses local redux manipulation\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"portfolio\"); // todo1: create constants\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n    }\r\n\r\n    getData(typeOfData){\r\n        for(let i = 0; i < this.props.profileData.listOfProfileData.length; i++){\r\n            if(this.props.profileData.listOfProfileData[i].id === this.props.portfolioId){\r\n                if(typeOfData === 'logs') return this.props.profileData.listOfProfileData[i].data.log;\r\n                else if(typeOfData === 'holdings') return this.props.profileData.listOfProfileData[i].data.holdings;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Portfolio Screen\"> \r\n                <div className=\"BrokerName\"> {this.props.portfolio} </div>\r\n                <Ribbon \r\n                currentTab={this.state.currentTab}\r\n                updateCurrentTab={this.updateCurrentTab} \r\n                />\r\n\r\n                <DataTable \r\n                portfolio={this.props.portfolio}\r\n                currentTab={this.state.currentTab}\r\n                logs={this.getData(\"logs\")}\r\n                holdings={this.getData(\"holdings\")}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        portfolioId: state.brokerData.id,\r\n        portfolio: state.brokerData.broker,\r\n        brokers: state.brokers.brokers,\r\n        \r\n        // BEE logs\r\n        // logs: state.logs.logs\r\n\r\n        // FEE logs\r\n        profileData: state.listOfProfileData\r\n    }),\r\n    {\r\n        //fetchLogs\r\n    }\r\n)(Portfolio);","import React, {Component} from 'react';\r\n\r\nclass Settings extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"settings\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"settings\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Settings Screen\">\r\n                Settings works                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;","import React, {Component} from 'react';\r\n\r\nclass About extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"about\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"about\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"About Screen\">\r\n                About works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, {Component} from 'react';\r\n\r\nclass Register extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"register\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"register\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Register Screen\">\r\n                Register works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","import React, {Component} from 'react';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\nclass Menu extends Component{\r\n\r\n    // this.props.toggleMenu\r\n\r\n    render(){\r\n        let linkClassName = \"settings-link\";\r\n        return(\r\n            <div className=\"menu\">\r\n                <div onClick={this.props.toggleMenu} className=\"menu-exit-btn\"> x </div>\r\n                \r\n                <Link to={'/'}><div onClick={this.props.toggleMenu} className={linkClassName}> Home </div></Link>\r\n                <Link to={'/Settings'}><div onClick={this.props.toggleMenu} className={linkClassName}> Settings </div></Link>\r\n                <Link to={'/Login'}><div onClick={this.props.toggleMenu} className={linkClassName}> Login </div></Link>\r\n                <Link to={'/Logout'}><div onClick={this.props.toggleMenu} className={linkClassName}> Logout </div></Link>\r\n                <Link to={'/Register'}><div onClick={this.props.toggleMenu} className={linkClassName}> Register </div></Link>\r\n                <Link to={'/About'}><div onClick={this.props.toggleMenu} className={linkClassName}> About </div></Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\n// Components\r\nimport Menu from './Menu';\r\n\r\nclass Nav extends Component{\r\n    \r\n    // props\r\n    // this.props.screen\r\n    // this.props.isMenuHidden\r\n    // this.props.toggleMenu\r\n\r\n    render(){\r\n        let title;\r\n        let backBtnClassName = \" back-btn \";\r\n        let menuClassName = this.props.isMenuHidden ? \" menu-outer-hidden \" : \" menu-outer \";\r\n\r\n        if(this.props.screen === \"home\"){\r\n            title = \"Select Portfolio\";\r\n            backBtnClassName = \" back-btn-hide \";\r\n        }\r\n        else if(this.props.screen === \"portfolio\"){\r\n            title = \"Portfolio\";\r\n        }\r\n        else if(this.props.screen === \"addBroker\"){\r\n            title = \"Add Broker\";\r\n        }\r\n        else if(this.props.screen === \"login\"){\r\n            title = \"Login\";\r\n        }\r\n        else if(this.props.screen === \"logout\"){\r\n            title = \"Logout\";\r\n        }\r\n        else if(this.props.screen === \"settings\"){\r\n            title = \"Settings\";\r\n        }\r\n        else if(this.props.screen === \"register\"){\r\n            title = \"Register\";\r\n        }\r\n        else if(this.props.screen === \"about\"){\r\n            title = \"About\";\r\n        }\r\n        else if(this.props.screen === \"selectaddtype\"){\r\n            title = \"Add a Log item\";\r\n        }\r\n        else if(this.props.screen === \"AddTopup\"){\r\n            title = \"Add Topup Event\";\r\n        }\r\n        else if(this.props.screen === \"AddWithdraw\"){\r\n            title = \"Add Withdraw Event\";\r\n        }\r\n        else if(this.props.screen === \"AddFX\"){\r\n            title = \"Add Forex Event\";\r\n        }\r\n        else if(this.props.screen === \"AddBuySell\"){\r\n            title = \"Add Buy or Sell Event\";\r\n        }\r\n\r\n        return(\r\n            <div className=\"Nav\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"col Padding\">\r\n                        <div className={backBtnClassName}>\r\n                            <Link to={'/'}>\r\n                                <div className=\"back-btn-btn\"> ↶ </div>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col Title\">\r\n                        {title}\r\n                    </div>\r\n                    <div className=\"col MenuBtn\">\r\n                        <div className=\"hamburger\" onClick={this.props.toggleMenu}> ☰ </div>\r\n                    </div>\r\n                    <div className={menuClassName}>\r\n                        <Menu\r\n                        toggleMenu={this.props.toggleMenu}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport '../styles/Footer.css';\r\n\r\nexport default function Footer(){\r\n    return(\r\n        <div className=\"Footer\">\r\n            Created by Paul / This is not a Sponsored Product / Recognized_Unrecognized © 2020\r\n        </div>\r\n    );\r\n}\r\n","// Packages\r\nimport './App.css';\r\nimport React, {Component} from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter, Switch, Route, Redirect} from 'react-router-dom';\r\n\r\n// Redux\r\nimport store from './store';\r\n\r\n// Components and Routes\r\nimport AddBroker from './routes/AddBroker';\r\nimport AddTopup from './routes/AddTopup';\r\nimport AddWithdraw from './routes/AddWithdraw';\r\nimport AddBuySell from './routes/AddBuySell';\r\nimport AddFX from './routes/AddFX';\r\nimport AddFee from './routes/AddFee';\r\nimport AddDividend from './routes/AddDividend';\r\nimport SelectAddType from './routes/SelectAddType';\r\nimport SelectAddTypeTopupWithdrawFX from './routes/SelectAddTypeTopupWithdrawFX';\r\nimport Edit from './routes/Edit';\r\nimport Home from './routes/Home';\r\nimport Login from './routes/Login';\r\nimport Logout from './routes/Logout';\r\nimport Portfolio from './routes/Portfolio';\r\nimport Settings from './routes/Settings';\r\nimport About from './routes/About';\r\nimport Register from './routes/Register';\r\n\r\nimport Nav from './components/Nav';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n      this.state ={\r\n        isMenuHidden: true, // TODO Move this into redux store\r\n        screen: \"home\", // TODO Move this into redux store also and connect each child Component to store\r\n      }\r\n\r\n    this.updateScreenName = this.updateScreenName.bind(this);\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n  }\r\n\r\n  toggleMenu = () => {\r\n    this.setState({isMenuHidden: !this.state.isMenuHidden});\r\n  }\r\n\r\n  updateScreenName(screen){\r\n    if(this.state.screen !== screen) this.setState({screen});\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <Provider store={store}>\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n              \r\n              <Nav \r\n              screen={this.state.screen}\r\n              isMenuHidden={this.state.isMenuHidden}\r\n              toggleMenu={this.toggleMenu}\r\n              />\r\n\r\n              <Switch>\r\n                <Route exact path='/' component = {\r\n                  () => <Home \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Portfolio' component = {\r\n                  () => <Portfolio \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddBroker' component = {\r\n                  () => <AddBroker \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddTopup' component = {\r\n                  () => <AddTopup \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddWithdraw' component = {\r\n                  () => <AddWithdraw\r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddFX' component = {\r\n                  () => <AddFX\r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddBuySell' component = {\r\n                  () => <AddBuySell\r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/SelectAddType' component = {\r\n                  () => <SelectAddType \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n                \r\n                <Route exact path='/SelectAddTypeTopupWithdrawFX' component = {\r\n                  () => <SelectAddTypeTopupWithdrawFX \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Login' component = {\r\n                  () => <Login \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Logout' component = {\r\n                  () => <Logout \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Edit' component = {\r\n                  () => <Edit \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Settings' component = {\r\n                  () => <Settings \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/About' component = {\r\n                  () => <About \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Register' component = {\r\n                  () => <Register \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Redirect from=\"*\" to=\"/\" />\r\n              </Switch>\r\n\r\n              <Footer />\r\n\r\n            </div>\r\n        </HashRouter>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}