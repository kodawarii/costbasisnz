{"version":3,"sources":["store.js","reducers/ProgramReducers.js","reduxtypes.js","reducers/UserDataReducers.js","actions/UserDataActions.js","routes/AddBroker.js","routes/Edit.js","routes/Home.js","actions/ProgramActions.js","components/Ribbon.js","routes/Login.js","components/Notes.js","components/Log.js","components/TopupWithdraw.js","components/DataTable.js","routes/Portfolio.js","components/Nav.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","portfolioNameToShow","state","action","type","name","payload","brokers","user1","logs","applyMiddleware","thunk","addToBrokers","oldBrokers","newBroker","dispatch","AddBroker","props","value","handleChange","bind","handleSubmit","event","this","setState","target","brokerToAdd","id","replace","c","r","Math","random","toString","substring","preventDefault","className","onSubmit","onChange","Component","connect","Home","fetchPortfolioNameToShow","fetchLogs","updateScreenName","undefined","map","broker","i","key","to","onClick","updatePortfolioNameToShow","renderBrokers","fetchBrokers","b1","log","Ribbon","currentTab","tabs","tab","updateCurrentTab","tabName","getTabs","Notes","isModalVisibleClass","isVisible","closeNotes","notes","Log","showNotes","data","entry","pkey","period","openNotes","notes1","actionStringClassName","includes","date","ticker","bought","sold","getData","TopupWithdraw","amountAUD","rate","amountUSD","notes2","DataTable","a","showTable","Portfolio","portfolio","Nav","title","screen","Footer","App","setBrokers","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f79672b.chunk.js","sourcesContent":["import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Reducers\r\nimport { brokersReducer, logsReducer } from './reducers/UserDataReducers';\r\nimport { portfolioNameToShowReducer } from './reducers/ProgramReducers';\r\n\r\nconst initialState = {};\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    combineReducers({\r\n        // Program Data\r\n        portfolioNameToShow: portfolioNameToShowReducer,\r\n\r\n        // User Data\r\n        brokers: brokersReducer,\r\n        logs: logsReducer\r\n    }),\r\n    initialState,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n    );\r\n\r\nexport default store;","import { \r\n    FETCH_PORTFOLIO_NAME_TO_SHOW,\r\n    UPDATE_PORTFOLIO_NAME_TO_SHOW\r\n} from \"../reduxtypes\";\r\n\r\nexport const portfolioNameToShowReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case FETCH_PORTFOLIO_NAME_TO_SHOW:\r\n            return { name: action.payload };\r\n        case UPDATE_PORTFOLIO_NAME_TO_SHOW:\r\n            return { name: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n};","// Program Data\r\nexport const FETCH_PORTFOLIO_NAME_TO_SHOW = \"FETCH_PORTFOLIO_NAME_TO_SHOW\";\r\nexport const UPDATE_PORTFOLIO_NAME_TO_SHOW = \"UPDATE_PORTFOLIO_NAME_TO_SHOW\";\r\n\r\n// User Data\r\nexport const FETCH_BROKERS = \"FETCH_BROKERS\";\r\nexport const ADD_TO_BROKERS = \"ADD_TO_BROKERS\";\r\nexport const FETCH_LOGS = \"FETCH_LOGS\";\r\nexport const ADD_TO_LOGS = \"ADD_TO_LOGS\";","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from \"../reduxtypes\";\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n\r\nexport const brokersReducer = (state = {brokers: user1.brokers}, action) => { // state = {}\r\n    switch(action.type){\r\n        case FETCH_BROKERS:\r\n            return { brokers: action.payload };\r\n        case ADD_TO_BROKERS:\r\n            return { brokers: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const logsReducer = ( state = {}, action ) => {\r\n    switch(action.type){\r\n        case FETCH_LOGS:\r\n            return { logs: action.payload };\r\n        default: \r\n            return state;\r\n    }\r\n}","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from '../reduxtypes';\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n\r\nexport const fetchBrokers = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_BROKERS,\r\n        payload: user1.brokers\r\n    });\r\n}\r\n\r\nexport const addToBrokers = (oldBrokers, newBroker) => dispatch => { // Front end MVP only\r\n    dispatch({\r\n        type: ADD_TO_BROKERS,\r\n        payload: [\r\n            ...oldBrokers,\r\n            newBroker\r\n        ]\r\n    });\r\n}\r\n\r\nexport const fetchLogs = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_LOGS,\r\n        payload: user1.b1.log\r\n    });\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../styles/AddBroker.css';\r\n\r\n// Redux\r\nimport { \r\n    addToBrokers\r\n} from '../actions/UserDataActions';\r\n\r\nclass AddBroker extends Component{\r\n\r\n    // this.props.addBroker()\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        function uuidv4() {\r\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n              return v.toString(16);\r\n            });\r\n        }\r\n\r\n        let brokerToAdd = {\r\n            name: this.state.value,\r\n            id: uuidv4().substring(0, 8)\r\n        }\r\n        \r\n        this.props.addToBrokers(this.props.brokers, brokerToAdd);\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddBroker Screen\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Enter Broker <br/><br/>\r\n                        <input type=\"text\" name=\"name\" value={this.state.value} onChange={this.handleChange} className=\"AddBrokerTextBox\"/>\r\n                    </label>\r\n                    <br/><br/>\r\n                    <p className=\"msg\"> Broker Portfolio Deletion in Settings (Todo: 1. Delete All Data, or 2. Hide from Home) </p>\r\n                    <input type=\"submit\" value=\"Add\" className=\"AddBroker-submit\" />\r\n                </form> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        addToBrokers\r\n    }\r\n)(AddBroker);","import React, {Component} from 'react';\r\n\r\nclass Edit extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Edit Screen\">\r\n                Edit works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Edit;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Home.css';\r\n\r\n// Redux\r\nimport { \r\n    fetchBrokers, \r\n    addToBrokers,\r\n    fetchLogs\r\n} from '../actions/UserDataActions';\r\n\r\nimport { \r\n    fetchPortfolioNameToShow, \r\n    updatePortfolioNameToShow \r\n} from '../actions/ProgramActions';\r\n\r\nclass Home extends Component{\r\n\r\n    // this.props.<redux>\r\n    // this.props.updateScreenName()\r\n    // this.props.brokers\r\n    // this.props.setBrokers()\r\n\r\n    componentDidMount(){\r\n        // this.props.fetchBrokers(); // API Version\r\n        this.props.fetchPortfolioNameToShow();\r\n        this.props.fetchLogs();\r\n        this.props.updateScreenName(\"home\");\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"home\"); // todo1: create constants\r\n    }\r\n\r\n    renderBrokers(){\r\n        if(this.props.brokers === undefined) return \"Loading Brokers\";\r\n        \r\n        return this.props.brokers.map( (broker, i) => {\r\n            return <ul key={i} className=\"Brokers\">\r\n                <Link to={'/Portfolio'}>\r\n                    <li onClick={ () => this.props.updatePortfolioNameToShow(broker.name)} className=\"Broker\">{broker.name}</li>\r\n                </Link>\r\n            </ul>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Home Screen\">\r\n                <div className=\"Brokers\">\r\n                    {this.renderBrokers()}\r\n                </div>\r\n                <div className=\"AddBroker-outer\">\r\n                    <Link to={'/AddBroker'}>\r\n                        <button className=\"Add-broker-btn\">+</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        fetchPortfolioNameToShow, updatePortfolioNameToShow,\r\n        fetchBrokers, addToBrokers, fetchLogs\r\n    }\r\n)(Home);","import { \r\n    FETCH_PORTFOLIO_NAME_TO_SHOW, \r\n    UPDATE_PORTFOLIO_NAME_TO_SHOW \r\n} from '../reduxtypes';\r\n\r\nexport const fetchPortfolioNameToShow = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_PORTFOLIO_NAME_TO_SHOW,\r\n        payload: \"redux-default\"\r\n    });\r\n}\r\n\r\nexport const updatePortfolioNameToShow = (portfolioNameToShow) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n        payload: portfolioNameToShow\r\n    });\r\n}","import React, {Component} from 'react';\r\nimport '../styles/Ribbon.css';\r\n\r\nclass Ribbon extends Component {\r\n\r\n    // this.props.updateCurrentTab()\r\n    // this.props.currentTab\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentTab: \"\",\r\n            tabs: [ // todo: Get from user data\r\n                \"Master\",\r\n                \"Holdings\",\r\n                \"Log\",\r\n                \"Topup / Withdraw\",\r\n                \"Buy / Sell\",\r\n                \"Fees\",\r\n                \"Dividends\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.state.currentTab !== this.props.currentTab) this.setState({currentTab: this.props.currentTab});\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n        this.props.updateCurrentTab(tab);\r\n    }\r\n\r\n    getTabs(){\r\n        let defaultClass = \"Tab-inner \";\r\n        let highlightedClass = \" Tab-inner-highlighted\";\r\n        return this.state.tabs.map((tabName, i) => {\r\n            return <li onClick={ () => this.updateCurrentTab(tabName)} className=\"Tab\" key={i}>\r\n                <span className={defaultClass + (tabName === this.state.currentTab ? highlightedClass : \"\")}>{tabName}</span>\r\n            </li>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Ribbon\">\r\n                <ul className=\"Tabs\">\r\n                    {this.getTabs()}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ribbon;","import React, {Component} from 'react';\r\n\r\nclass Login extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Login Screen\">\r\n                Login works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\nimport '../styles/Notes.css';\r\n\r\nexport default class Notes extends Component {\r\n    \r\n    // this.props.notes\r\n    // this.props.isVisible\r\n    // this.props.closeNotes\r\n\r\n    render(){\r\n        let isModalVisibleClass = this.props.isVisible ? \" Notes \" : \" Notes-hide \";\r\n\r\n        return(\r\n            <div className={isModalVisibleClass}>\r\n                <div className=\" Notes-exit \" onClick={this.props.closeNotes}>\r\n                    x\r\n                </div>\r\n                <div className=\"Notes-content\">\r\n                    {this.props.notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\n// components \r\nimport Notes from './Notes';\r\n\r\nclass Log extends Component {\r\n    \r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: \"\"\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getData(){\r\n        if(this.props.data === undefined) return <tr><td>must fetch first</td></tr>;\r\n\r\n        return this.props.data.map( (entry, i) => {\r\n            if(entry.type === \"start\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"reg\"){\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"BUY\")){\r\n                    actionStringClassName = \" Buy \";\r\n                }\r\n                else if(entry.action.includes(\"SELL\")){\r\n                    actionStringClassName = \" Sell \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"Dividend\")){\r\n                    actionStringClassName = \" Dividend \";\r\n                }\r\n                else if(entry.action.includes(\"Fee\")){\r\n                    actionStringClassName = \" Fee \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    \r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    \r\n                    <td>{entry.ticker}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end1\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>BOUGHT</b></td>\r\n                    <td>{entry.bought}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end2\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>SOLD</b></td>\r\n                    <td>{entry.sold}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ref</th>\r\n                            <th>Date</th>\r\n                            <th>Action</th>\r\n                            <th>Symbol</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getData()}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"AddLog\">\r\n                    ADD +\r\n                </div>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Log;","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\nimport Notes from './Notes';\r\n\r\nclass TopupWithdraw extends Component{\r\n\r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: \"\"\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getData(){\r\n        if(this.props.data === undefined) return <tr>\r\n                <td>Must</td>\r\n                <td>Fetch</td>\r\n                <td>First</td>\r\n                <td>From</td>\r\n                <td>The</td>\r\n                <td>User</td>\r\n                <td>ok</td>\r\n            </tr>\r\n\r\n        return this.props.data.map ((entry, i) => {\r\n            if(entry.type === \"end1\" || entry.type === \"end2\") {\r\n                // Continue;\r\n            }\r\n\r\n            else if(entry.type === \"start\"){ // TODO: REFACTOR START ROWS\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n            </tr>\r\n            }\r\n\r\n            else if(entry.action.includes(\"Topup\") ||\r\n            entry.action.includes(\"Withdraw\") ||\r\n            entry.action.includes(\"FX\")){ // TODO: KEEP CONSTANTS AND SCHEMA AS CASE SENSITIVE\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    <td>{entry.amountAUD}</td>\r\n                    <td>{entry.rate}</td>\r\n                    <td>{entry.amountUSD}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes2)}> x </td>\r\n                </tr>\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div>\r\n                    <p>Total AUD= </p>\r\n                    <p>Total USD= </p>\r\n                </div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ref</th>\r\n                            <th className=\"Date-topup-withdraw\">Date</th>\r\n                            <th>Action</th>\r\n                            <th>AUD</th>\r\n                            <th>Rate</th>\r\n                            <th>USD</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getData()}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"AddLog\">\r\n                    ADD +\r\n                </div>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopupWithdraw;","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\n// Components\r\nimport Log from './Log';\r\nimport TopupWithdraw from './TopupWithdraw';\r\n\r\nclass DataTable extends Component {\r\n\r\n    // this.props.currentTab\r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            a: 1\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let showTable = () => { return \"n/a\" };\r\n    \r\n        switch(this.props.currentTab){\r\n            case \"Log\":\r\n                showTable = () => { return <Log data={this.props.data}/> }\r\n                break;\r\n            case \"Topup / Withdraw\":\r\n                showTable = () => { return <TopupWithdraw data={this.props.data}/> }\r\n                break;\r\n            default:\r\n                showTable = () => { return \"Invalid Choice\" }\r\n                break;\r\n        }\r\n\r\n        return(\r\n            <div className=\"DataTable\">\r\n                {showTable()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataTable;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Portfolio.css';\r\n\r\n// Components\r\nimport Ribbon from '../components/Ribbon';\r\nimport DataTable from '../components/DataTable';\r\n\r\nclass Portfolio extends Component{\r\n\r\n    // props\r\n    // this.props.<redux>\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTab: \"Topup / Withdraw\"\r\n        }\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"portfolio\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"portfolio\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Portfolio Screen\"> \r\n                <div className=\"BrokerName\"> {this.props.portfolio} </div>\r\n                <Ribbon \r\n                currentTab={this.state.currentTab}\r\n                updateCurrentTab={this.updateCurrentTab.bind(this)} \r\n                />\r\n\r\n                <DataTable \r\n                currentTab={this.state.currentTab}\r\n                data={this.props.logs}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        portfolio: state.portfolioNameToShow.name,\r\n        logs: state.logs.logs\r\n    }),\r\n    {\r\n        \r\n    }\r\n)(Portfolio);","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\nclass Nav extends Component{\r\n    \r\n    // props\r\n    // this.props.screen\r\n    //\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        let title;\r\n        if(this.props.screen === \"home\"){\r\n            title = \"Select Portfolio\";\r\n        }\r\n        if(this.props.screen === \"portfolio\"){\r\n            title = \"Portfolio\";\r\n        }\r\n\r\n        return(\r\n            <div className=\"Nav\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"col Padding\">\r\n                        <Link to={'/'}>\r\n                            <div> ↶ </div>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col Title\">\r\n                        {title}\r\n                    </div>\r\n                    <div className=\"col MenuBtn\">\r\n                        <div className=\"hamburger\"> ☰ </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport '../styles/Footer.css';\r\n\r\nexport default function Footer(){\r\n    return(\r\n        <div className=\"Footer\">\r\n            foot\r\n        </div>\r\n    );\r\n}\r\n","// Packages\r\nimport './App.css';\r\nimport React, {Component} from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter, Switch, Route, Redirect} from 'react-router-dom';\r\n\r\n// Redux\r\nimport store from './store';\r\n\r\n// Components and Routes\r\nimport AddBroker from './routes/AddBroker';\r\nimport Edit from './routes/Edit';\r\nimport Home from './routes/Home';\r\nimport Login from './routes/Login';\r\nimport Portfolio from './routes/Portfolio';\r\nimport Nav from './components/Nav';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n      this.state ={\r\n        screen: \"home\",\r\n        brokers: []\r\n      }\r\n\r\n    this.updateScreenName = this.updateScreenName.bind(this);\r\n    this.setBrokers = this.setBrokers.bind(this);\r\n  }\r\n\r\n  setBrokers = (brokers) => {\r\n    this.setState({brokers});\r\n  }\r\n\r\n  updateScreenName(screen){\r\n    if(this.state.screen !== screen) this.setState({screen});\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <Provider store={store}>\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n              \r\n              <Nav \r\n              screen={this.state.screen}/>\r\n\r\n              <Switch>\r\n                <Route exact path='/' component = {\r\n                  () => <Home \r\n                  updateScreenName={this.updateScreenName}\r\n                  brokers={this.state.brokers}\r\n                  setBrokers={this.setBrokers}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Portfolio' component = {\r\n                  () => <Portfolio \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddBroker' component = {\r\n                  () => <AddBroker \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Redirect from=\"*\" to=\"/\" />\r\n              </Switch>\r\n\r\n              <Footer />\r\n\r\n            </div>\r\n        </HashRouter>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}