{"version":3,"sources":["store.js","reducers/ProgramReducers.js","reduxtypes.js","reducers/UserDataReducers.js","actions/UserDataActions.js","components/AddItemModal.js","routes/AddBroker.js","routes/AddTopup.js","routes/AddWithdraw.js","routes/AddBuy.js","routes/AddSell.js","routes/AddFX.js","routes/AddFee.js","routes/AddDividend.js","routes/SelectAddType.js","routes/Edit.js","routes/Home.js","actions/ProgramActions.js","routes/Login.js","routes/Logout.js","components/Ribbon.js","components/Notes.js","components/Log.js","components/TopupWithdraw.js","components/DataTable.js","routes/Portfolio.js","routes/Settings.js","routes/About.js","routes/Register.js","components/Menu.js","components/Nav.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","portfolioNameToShow","state","action","type","name","payload","brokerData","brokers","user1","listOfProfileData","logs","applyMiddleware","thunk","getBrokerId","brokerName","console","log","AddItemModal","this","props","show","className","prompt","onClick","closeModal","Component","AddBroker","value","showModal","handleChange","bind","handleSubmit","setState","event","target","brokerToAdd","id","replace","c","r","Math","random","toString","substring","addToBrokers","preventDefault","updateScreenName","onSubmit","onChange","connect","oldBrokers","newBroker","dispatch","AddTopup","pkey","date","getDate","notes1","amountSent","rate","amountLanded","notes2","getTopupForm_TYPE_CONVERT","getTopupForm_TYPE_NATIVE","handleChangeAmountSent","handleChangeAmountLanded","handleChangeConversionRate","handleChangeNotes","today","Date","dd","String","padStart","mm","getMonth","getFullYear","substr","logToAdd","addToLogs","portfolio","currency","formToShow","undefined","topupStyle","baseCurrency","brokerNameToAddTo","newLog","i","length","data","push","SelectAddType","liClassName","to","Edit","Home","updatePortfolioNameToShow","switchBrokerDataContext","map","broker","key","updatePortfolioContext","renderBrokers","listOfBrokers","Login","Logout","Ribbon","currentTab","tabs","tab","updateCurrentTab","tabName","getTabs","Notes","isModalVisibleClass","isVisible","closeNotes","notes","Log","showNotes","entry","period","openNotes","actionStringClassName","includes","ticker","bought","sold","getData","TopupWithdraw","targetCurrency","DataTable","a","showTable","Portfolio","getLogs","profileData","Settings","About","Register","Menu","toggleMenu","Nav","title","backBtnClassName","menuClassName","isMenuHidden","screen","Footer","App","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b665875.chunk.js","sourcesContent":["import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Reducers\r\nimport { brokersReducer, profileDataReducer } from './reducers/UserDataReducers';\r\nimport { portfolioNameToShowReducer, brokerDataReducer } from './reducers/ProgramReducers';\r\n\r\nconst initialState = {};\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    combineReducers({\r\n        // Program Data . UI Items\r\n        portfolioNameToShow: portfolioNameToShowReducer,\r\n\r\n        // Program Data . Broker Data\r\n        brokerData: brokerDataReducer,\r\n\r\n        // User Data . Log Data\r\n        //logs: profileDataReducer, // BEE\r\n        brokers: brokersReducer,\r\n        listOfProfileData: profileDataReducer\r\n    }),\r\n    initialState,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n    );\r\n\r\nexport default store;","import { \r\n    UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n    SWITCH_BROKER_DATA_CONTEXT,\r\n    FETCH_TOPUPSTYLE\r\n} from \"../reduxtypes\";\r\n\r\nexport const portfolioNameToShowReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case UPDATE_PORTFOLIO_NAME_TO_SHOW:\r\n            return { name: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const brokerDataReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case SWITCH_BROKER_DATA_CONTEXT:\r\n            return { brokerData: action.payload };\r\n        default: \r\n            return state;\r\n    }\r\n};","// Program Data\r\nexport const UPDATE_PORTFOLIO_NAME_TO_SHOW = \"UPDATE_PORTFOLIO_NAME_TO_SHOW\";\r\nexport const SWITCH_BROKER_DATA_CONTEXT = \"SWITCH_BROKER_DATA_CONTEXT\";\r\nexport const FETCH_TOPUPSTYLE = \"FETCH_TOPUPSTYLE\"; // REMOVE THIS AT ONCE --all calls related to this\r\n\r\n// User Data\r\nexport const FETCH_BROKERS = \"FETCH_BROKERS\";\r\nexport const ADD_TO_BROKERS = \"ADD_TO_BROKERS\";\r\nexport const FETCH_LOGS = \"FETCH_LOGS\";\r\nexport const ADD_TO_LOGS = \"ADD_TO_LOGS\";","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from \"../reduxtypes\";\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n\r\nexport const brokersReducer = (state = {brokers: user1.brokers}, action) => { // state = {}\r\n    switch(action.type){\r\n        case FETCH_BROKERS:\r\n            return { brokers: action.payload };\r\n        case ADD_TO_BROKERS:\r\n            return { brokers: action.payload };\r\n        default:\r\n            // retrieving the default store from mock data for the front end mvp app, when we have backend API, state={}\r\n            // Then we manipulate that local copy (FETCH_BROEKRS is only used when we have backend)\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const profileDataReducer = ( state = {listOfProfileData: user1.listOfProfileData}, action ) => { // Hard coded fetching only for the FEE app\r\n    switch(action.type){\r\n        case FETCH_LOGS:\r\n            return { logs: action.payload }; // BEE app fetches specific log for current portfolio\r\n        case ADD_TO_LOGS:\r\n            return { listOfProfileData: action.payload }; // FEE uses listOfProfileData\r\n        default:\r\n            return state;\r\n    }\r\n}","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from '../reduxtypes';\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n// In order to CRUD this mock data, we need to create a local copy within redux store - phase1=brokers, phase2=logs\r\n// so 1. we have local copy data, then manipulate that local copy\r\n// 2. when we have backend api and db, no longer local changes\r\n\r\n// We will use this in the future when making backend API calls // phase1\r\nexport const fetchBrokers = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_BROKERS,\r\n        payload: user1.brokers\r\n    });\r\n}\r\n\r\nexport const addToBrokers = (oldBrokers, newBroker) => dispatch => { // We are only adding the new broker to the local client redux front end store (will be different when we have backend API)\r\n    dispatch({\r\n        type: ADD_TO_BROKERS,\r\n        payload: [\r\n            ...oldBrokers,\r\n            newBroker\r\n        ]\r\n    });\r\n}\r\n\r\n\r\n// To use in BEE app\r\nexport const fetchLogs = (portfolio) => dispatch => {\r\n    switch(portfolio){\r\n        case \"Interactive Brokers\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b1.log\r\n            });\r\n            break;\r\n        case \"Hatch\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b2.log\r\n            });\r\n            break;\r\n        case \"Sharsies\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b3.log\r\n            });\r\n            break;\r\n        default:\r\n            dispatch({\r\n                type: FETCH_LOGS, // TODO: have error throwing reducer\r\n                payload: [{\r\n                    \"type\": \"start\",\r\n                    \"period\": \"Error - User does not have that portfolio / any entries within that portfolio\"\r\n                }]\r\n            })\r\n            console.log(\">> ID DOES NOT EXIST\");\r\n            break;\r\n    }\r\n}\r\n\r\nexport const addToLogs = (listOfProfileData, brokerNameToAddTo, newLog) => dispatch => {\r\n\r\n    // need to take care of immutables\r\n    for(let i = 0; i < listOfProfileData.listOfProfileData.length; i++){\r\n        if(listOfProfileData.listOfProfileData[i].id === getBrokerId(brokerNameToAddTo)){\r\n            listOfProfileData.listOfProfileData[i].data.log.push(newLog);\r\n        }\r\n    }\r\n\r\n    dispatch({\r\n        type: ADD_TO_LOGS,\r\n        payload: listOfProfileData.listOfProfileData\r\n        \r\n    });\r\n}\r\n\r\n// TODO Globalize this function\r\nfunction getBrokerId(brokerName){\r\n    switch(brokerName){\r\n        case 'Interactive Brokers':\r\n            return 'b1';\r\n        case 'Hatch':\r\n            return 'b2';\r\n        case 'Sharsies':\r\n            return 'b3';\r\n        default:\r\n            console.log('> Broker does not exist: ' + brokerName);\r\n            return null;\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport '../styles/AddDataScreens.css';\r\n\r\nclass AddItemModal extends Component{\r\n\r\n    // this.props.show\r\n    // this.props.prompt\r\n    // this.closeModal\r\n\r\n    render(){\r\n        if(this.props.show){\r\n            return(\r\n                <div className=\"AddItemModal\">\r\n                    {this.props.prompt}\r\n                    <button onClick={this.props.closeModal} className=\"closeBtn\">Close</button>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"AddItemModal-hide\" />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default AddItemModal;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    addToBrokers\r\n} from '../actions/UserDataActions';\r\n\r\n// Components\r\nimport AddItemModal from '../components/AddItemModal';\r\n\r\nclass AddBroker extends Component{\r\n\r\n    // this.props.addBroker()\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: '',\r\n            showModal: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({showModal: false});\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        function uuidv4() {\r\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n              return v.toString(16);\r\n            });\r\n        }\r\n\r\n        let brokerToAdd = {\r\n            name: this.state.value,\r\n            id: uuidv4().substring(0, 8)\r\n        };\r\n        \r\n        this.props.addToBrokers(this.props.brokers, brokerToAdd);\r\n        \r\n        this.setState({showModal: true});\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"addBroker\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"addBroker\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddData AddBroker Screen\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Enter Broker <br/><br/>\r\n                        <input type=\"text\" name=\"name\" value={this.state.value} onChange={this.handleChange} className=\"AddDataTextBox\"/>\r\n                    </label>\r\n                    <br/><br/>\r\n                    <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n                </form> \r\n                <AddItemModal show={this.state.showModal} prompt={\"Successfully Added New Broker: \" + this.state.value} closeModal={this.closeModal}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        addToBrokers\r\n    }\r\n)(AddBroker);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    \r\n} from '../actions/ProgramActions';\r\n\r\nimport {\r\n    addToLogs\r\n} from '../actions/UserDataActions';\r\n\r\n// Components\r\nimport AddItemModal from '../components/AddItemModal';\r\n\r\nclass AddTopup extends Component{\r\n\r\n    // this.props.\r\n\r\n    // Other Notes\r\n    // There are 2 types of topups (so far...)\r\n    // 1. Native (IBKR, Sharsies)\r\n    // 2. Convert (Hatch)\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //// TOPUP SCHEMA\r\n            type: 'reg',\r\n            pkey: 0,\r\n            date: this.getDate(),\r\n            action: 'Topup', // TODO: Change to Parameter string from external json constants\r\n            notes1: '', // TODO: Handle notes1 or notes2 - did we arrive on AddTopup Section via log ribbon OR topup/withdraw ribbon ?\r\n\r\n            amountSent: '',\r\n            rate: '',\r\n            amountLanded: '',\r\n            notes2: '', // TODO notes2 implementation\r\n\r\n            //// PROGRAM DATA\r\n            showModal: false\r\n        }\r\n\r\n        this.getTopupForm_TYPE_CONVERT = this.getTopupForm_TYPE_CONVERT.bind(this);\r\n        this.getTopupForm_TYPE_NATIVE = this.getTopupForm_TYPE_NATIVE.bind(this);\r\n        this.handleChangeAmountSent = this.handleChangeAmountSent.bind(this);\r\n        this.handleChangeAmountLanded = this.handleChangeAmountLanded.bind(this);\r\n        this.handleChangeConversionRate = this.handleChangeConversionRate.bind(this);\r\n        this.handleChangeNotes = this.handleChangeNotes.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({showModal: false});\r\n    }\r\n\r\n\r\n    getDate(){\r\n        var today = new Date();\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\r\n        var yyyy = today.getFullYear();\r\n\r\n        return yyyy.toString().substr(2,2) + '-' + mm + '-' + dd;\r\n    }\r\n\r\n    handleChangeNotes(event){\r\n        this.setState({notes1: event.target.value});\r\n    }\r\n\r\n    handleChangeConversionRate(event){\r\n        this.setState({rate: event.target.value});\r\n    }\r\n\r\n    handleChangeAmountLanded(event){\r\n        this.setState({amountLanded: event.target.value});\r\n    }\r\n\r\n    handleChangeAmountSent(event){\r\n        this.setState({amountSent: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        let logToAdd = {\r\n            type: 'reg',\r\n            pkey: 0,\r\n            date: this.getDate(),\r\n            action: 'Topup',\r\n            notes1: this.state.notes1,\r\n\r\n            amountSent: this.state.amountSent,\r\n            rate: this.state.rate,\r\n            amountLanded: this.state.amountLanded,\r\n            notes2: this.state.notes2 // TODO notes2 implementation\r\n        };\r\n            \r\n        this.props.addToLogs(this.props.listOfProfileData, this.props.portfolio, logToAdd);\r\n\r\n        this.setState({showModal: true});\r\n       \r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddTopup\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddTopup\"); // todo1: create constants\r\n    }\r\n\r\n    // TODO: Add Number Validations\r\n    getTopupForm_TYPE_NATIVE(currency){\r\n        let notesType = \"notes1\"; // Determine which notes we are adding\r\n\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                \r\n                Topup Amount ({currency})\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountSent\" value={this.state.amountSent} onChange={this.handleChangeAmountSent} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                Notes1\r\n                <br/><br/>\r\n                <input type=\"text\" name={notesType} value={this.state.notes1} onChange={this.handleChangeNotes} className=\"AddDataTextBox\"/>\r\n            \r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form> \r\n    }\r\n\r\n    // TODO: Add Number Validations\r\n    getTopupForm_TYPE_CONVERT(currency){\r\n        let notesType = \"notes1\"; // Determine which type of notes we are adding\r\n\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                \r\n                Amount sent \r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountSent\" value={this.state.amountSent} onChange={this.handleChangeAmountSent} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                Conversion Rate \r\n                <br/><br/>\r\n                <input type=\"text\" name=\"rate\" value={this.state.rate} onChange={this.handleChangeConversionRate} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n                \r\n                Amount Recieved ({currency})\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountLanded\" value={this.state.amountLanded} onChange={this.handleChangeAmountLanded} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                Notes1\r\n                <br/><br/>\r\n                <input type=\"text\" name={notesType} value={this.state.notes1} onChange={this.handleChangeNotes} className=\"AddDataTextBox\"/>\r\n\r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form>\r\n    }\r\n\r\n    render(){\r\n        let formToShow;\r\n        if(this.props.brokerData === undefined) {\r\n            console.log(\">> Could not find broker data\");\r\n            formToShow = () => <div>No Broker Selected</div>;\r\n        }\r\n        else if(this.props.brokerData.topupStyle === 'native'){\r\n            formToShow = () => this.getTopupForm_TYPE_NATIVE(this.props.brokerData.baseCurrency);\r\n        }\r\n        else if(this.props.brokerData.topupStyle === 'convert'){\r\n            formToShow = () => this.getTopupForm_TYPE_CONVERT(this.props.brokerData.baseCurrency);\r\n        }\r\n        else{\r\n            console.log('>> THAT TOPUP STYLE DOES NOT EXIST');\r\n            formToShow = () => <div> ERROR </div>;\r\n        }\r\n\r\n        return(\r\n            <div className=\"AddData AddTopup Screen\">\r\n                <h4>{this.props.portfolio}</h4>\r\n                {formToShow()}\r\n                <AddItemModal show={this.state.showModal} prompt={\"Successfully Added New Topup Event to \" + this.props.portfolio} closeModal={this.closeModal}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        portfolio: state.portfolioNameToShow.name,\r\n        brokers: state.brokers.brokers,\r\n        brokerData: state.brokerData.brokerData,\r\n\r\n        // BEE backend db logs\r\n        // logs: state.logs.logs // care at logs vs log lol\r\n\r\n        // FEE local redux logs\r\n        listOfProfileData: state.listOfProfileData\r\n    }),\r\n    {\r\n        addToLogs\r\n    }\r\n)(AddTopup);","import React, {Component} from 'react';\r\n\r\nclass AddWithdraw extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddWithdraw\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddWithdraw\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddWithdraw Screen\">\r\n                AddWithdraw works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddWithdraw;","import React, {Component} from 'react';\r\n\r\nclass AddBuy extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddBuy\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddBuy\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddBuy Screen\">\r\n                AddBuy works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddBuy;","import React, {Component} from 'react';\r\n\r\nclass AddSell extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddSell\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddSell\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddSell Screen\">\r\n                AddSell works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddSell;","import React, {Component} from 'react';\r\n\r\nclass AddFX extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddFX\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddFX\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddFX Screen\">\r\n                AddFX works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddFX;","import React, {Component} from 'react';\r\n\r\nclass AddFee extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddFee\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddFee\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddFee Screen\">\r\n                AddFee works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddFee;","import React, {Component} from 'react';\r\n\r\nclass AddDividend extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddDividend\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddDividend\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddDividend Screen\">\r\n                AddDividend works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddDividend;","import React, {Component} from 'react';\r\nimport '../styles/SelectAddType.css';\r\n\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\n\r\nclass SelectAddType extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"selectaddtype\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"selectaddtype\"); // todo1: create constants\r\n    }\r\n\r\n    // TODO: Enumerate in external constants file\r\n    render(){\r\n        let liClassName = \"SelectAddType-li\";\r\n        return(\r\n            <div className=\"SelectAddType Screen\">\r\n                <h4> Select Type of Log </h4>\r\n                <ul className=\"SelectAddType-ul\">\r\n                    <Link to={'/AddTopup'}><li className={liClassName+\" AddTopup-li\"}> 1. Topup </li></Link>\r\n                    <Link to={'/AddWithdraw'}><li className={liClassName+\" AddWithdraw-li\"}> 2. Withdraw </li></Link>\r\n                    <Link to={'/AddFX'}><li className={liClassName+\" AddFX-li\"}> 3. FX </li></Link>\r\n                    <Link to={'/AddBuy'}><li className={liClassName+\" AddBuy-li\"}> 4. Buy </li></Link>\r\n                    <Link to={'/AddSell'}><li className={liClassName+\" AddSell-li\"}> 5. Sell </li></Link>\r\n                    <Link to={'/AddDividend'}><li className={liClassName+\" AddDividend-li\"}> 6. Dividend </li></Link>\r\n                    <Link to={'/AddFee'}><li className={liClassName+\" AddFee-li\"}> 7. Fee </li></Link>\r\n\r\n                    <Link to={'/'}><li className={liClassName+\" \"}> 8. New Period </li></Link>\r\n                    <Link to={'/'}><li className={liClassName+\" \"}> 9. End Period </li></Link>\r\n                    <Link to={'/'}><li className={liClassName+\" \"}> 10. Period Bought </li></Link>\r\n                    <Link to={'/'}><li className={liClassName+\" \"}> 11. Period Sold </li></Link>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectAddType;","import React, {Component} from 'react';\r\n\r\nclass Edit extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Edit Screen\">\r\n                Edit works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Edit;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Home.css';\r\n\r\n// Redux\r\nimport { \r\n    // fetchBrokers,\r\n} from '../actions/UserDataActions';\r\n\r\nimport { \r\n    updatePortfolioNameToShow ,\r\n    switchBrokerDataContext\r\n} from '../actions/ProgramActions';\r\n\r\nclass Home extends Component{\r\n\r\n    // this.props.<redux>\r\n    // this.props.updateScreenName()\r\n\r\n    componentDidMount(){\r\n        // this.props.fetchBrokers(); // To use when we have backend API implemented\r\n        this.props.updateScreenName(\"home\");\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"home\"); // todo1: create constants\r\n    }\r\n\r\n    updatePortfolioContext(brokerName, id){\r\n        this.props.updatePortfolioNameToShow(brokerName);\r\n        this.props.switchBrokerDataContext(this.props.brokers, id);\r\n    }\r\n\r\n    renderBrokers(){\r\n        if(this.props.brokers === undefined) return \"Loading Brokers\";\r\n        \r\n        return this.props.brokers.map( (broker, i) => {\r\n            return <ul key={i} className=\"Brokers\">\r\n                <Link to={'/Portfolio'}>\r\n                    <li onClick={ () => this.updatePortfolioContext(broker.name, broker.id)} className=\"Broker\">{broker.name}</li>\r\n                </Link>\r\n            </ul>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Home Screen\">\r\n                <div className=\"Brokers\">\r\n                    {this.renderBrokers()}\r\n                </div>\r\n                <div className=\"AddBrokerBtn-wrapper\">\r\n                    <Link to={'/AddBroker'}>\r\n                        <button className=\"AddBtn\">+</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        updatePortfolioNameToShow, switchBrokerDataContext\r\n        // fetchBrokers\r\n    }\r\n)(Home);","import { \r\n    UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n    SWITCH_BROKER_DATA_CONTEXT\r\n} from '../reduxtypes';\r\n\r\nexport const updatePortfolioNameToShow = (portfolioNameToShow) => dispatch => { // No Need to Fetch this // Default = {} (see reducer)\r\n    dispatch({\r\n        type: UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n        payload: portfolioNameToShow\r\n    });\r\n}\r\n\r\nexport const switchBrokerDataContext = (listOfBrokers, id) => dispatch => {\r\n    let brokerData = {};\r\n    for(let i = 0; i < listOfBrokers.length; i++){\r\n        if(listOfBrokers[i].id === id) brokerData = listOfBrokers[i];\r\n    }\r\n\r\n    dispatch({\r\n        type: SWITCH_BROKER_DATA_CONTEXT,\r\n        payload: brokerData\r\n    });\r\n}","import React, {Component} from 'react';\r\n\r\nclass Login extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"login\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"login\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Login Screen\">\r\n                Login works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\n\r\nclass Logout extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"logout\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"logout\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Logout Screen\">\r\n                Logout works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logout;","import React, {Component} from 'react';\r\nimport '../styles/Ribbon.css';\r\n\r\nclass Ribbon extends Component {\r\n\r\n    // this.props.updateCurrentTab()\r\n    // this.props.currentTab\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentTab: \"\",\r\n            tabs: [ // todo: Get from user data\r\n                \"Master\",\r\n                \"Holdings\",\r\n                \"Log\",\r\n                \"Topup / Withdraw\",\r\n                \"Buy / Sell\",\r\n                \"Fees\",\r\n                \"Dividends\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.state.currentTab !== this.props.currentTab) this.setState({currentTab: this.props.currentTab});\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n        this.props.updateCurrentTab(tab);\r\n    }\r\n\r\n    getTabs(){\r\n        let defaultClass = \"Tab-inner \";\r\n        let highlightedClass = \" Tab-inner-highlighted\";\r\n        return this.state.tabs.map((tabName, i) => {\r\n            return <li onClick={ () => this.updateCurrentTab(tabName)} className=\"Tab\" key={i}>\r\n                <span className={defaultClass + (tabName === this.state.currentTab ? highlightedClass : \"\")}>{tabName}</span>\r\n            </li>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Ribbon\">\r\n                <ul className=\"Tabs\">\r\n                    {this.getTabs()}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ribbon;","import React, {Component} from 'react';\r\nimport '../styles/Notes.css';\r\n\r\nexport default class Notes extends Component {\r\n    \r\n    // this.props.notes\r\n    // this.props.isVisible\r\n    // this.props.closeNotes\r\n\r\n    render(){\r\n        let isModalVisibleClass = this.props.isVisible ? \" Notes \" : \" Notes-hide \";\r\n\r\n        return(\r\n            <div className={isModalVisibleClass}>\r\n                <div className=\" Notes-exit \" onClick={this.props.closeNotes}>\r\n                    x\r\n                </div>\r\n                <div className=\"Notes-content\">\r\n                    {this.props.notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/DataTable.css';\r\n\r\n// Components \r\nimport Notes from './Notes';\r\n\r\nclass Log extends Component {\r\n    \r\n    // this.props.data\r\n    // this.props.portfolio\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: \"\"\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    // TODO: add feature where Show Notes Link only if there is a note\r\n    getData(){\r\n        if(this.props.data === undefined) return <tr><td>must fetch first</td></tr>;\r\n\r\n        return this.props.data.map( (entry, i) => {\r\n            if(entry.type === \"start\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> ⭦ </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"reg\"){\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"BUY\")){\r\n                    actionStringClassName = \" Buy \";\r\n                }\r\n                else if(entry.action.includes(\"SELL\")){\r\n                    actionStringClassName = \" Sell \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"Dividend\")){\r\n                    actionStringClassName = \" Dividend \";\r\n                }\r\n                else if(entry.action.includes(\"Fee\")){\r\n                    actionStringClassName = \" Fee \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    \r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    \r\n                    <td>{entry.ticker}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> ⭦ </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end1\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>BOUGHT</b></td>\r\n                    <td>{entry.bought}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> ⭦ </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end2\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>SOLD</b></td>\r\n                    <td>{entry.sold}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> ⭦ </td>\r\n                </tr>\r\n            }\r\n            else{\r\n                // This can be here since log captures ALL types of activity\r\n                console.log(\"> ERROR: LOG TYPE DOES NOT EXIST: \" + entry.type);\r\n                return <tr><td>ERROR</td></tr>;\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ref</th>\r\n                            <th>Date</th>\r\n                            <th>Action</th>\r\n                            <th>Symbol</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getData()}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <Link to={'/SelectAddType'}>\r\n                    <div className=\"AddLogBtn-wrapper\">\r\n                        <button className=\"AddBtn\">+</button>\r\n                    </div>\r\n                </Link>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Log;","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\n// Redux\r\nimport {connect} from 'react-redux';\r\n\r\n// Components\r\nimport Notes from './Notes';\r\n\r\nclass TopupWithdraw extends Component{\r\n\r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: \"\"\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    // TODO: IBKR HATCH AND SHARIES WILL HAVE DIFFERENT FORMAT\r\n    // --.amountAUD no longer applies here\r\n    // 1. native topup 2. convert topup\r\n    getData(){\r\n        if(this.props.data === undefined) return <tr>\r\n                <td>Must</td>\r\n                <td>Fetch</td>\r\n                <td>First</td>\r\n                <td>From</td>\r\n                <td>The</td>\r\n                <td>User</td>\r\n                <td>ok</td>\r\n            </tr>\r\n\r\n        return this.props.data.map ((entry, i) => {\r\n\r\n            if(entry.type === \"end1\" || entry.type === \"end2\") {\r\n                // Continue;\r\n            }\r\n\r\n            else if(entry.type === \"start\"){ // TODO: REFACTOR START ROWS\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n            </tr>\r\n            }\r\n            \r\n            else if(entry.action.includes(\"Topup\") ||\r\n            entry.action.includes(\"Withdraw\") ||\r\n            entry.action.includes(\"FX\")){ // TODO: KEEP CONSTANTS AND SCHEMA AS CASE SENSITIVE\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n            \r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    <td>{entry.amountSent}</td>\r\n                    <td>{entry.rate}</td>\r\n                    <td>{entry.amountLanded}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes2)}> ⭦ </td>\r\n                </tr>\r\n            }\r\n            \r\n            // return something\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div>\r\n                    <p>Total {this.props.brokerData.baseCurrency}: </p>\r\n                    <p>Total {this.props.brokerData.targetCurrency}: </p>\r\n                </div>\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Ref</th>\r\n                        <th className=\"Date-topup-withdraw\">Date</th>\r\n                        <th>Action</th>\r\n                        <th>{this.props.brokerData.baseCurrency}</th>\r\n                        <th>Rate</th>\r\n                        <th>{this.props.brokerData.targetCurrency}</th>\r\n                        <th>Notes</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getData()}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"AddLog\">\r\n                    ADD + // go direct to addTopupWithdraw page\r\n                </div>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        brokerData: state.brokerData.brokerData\r\n    }),\r\n    {\r\n\r\n    }\r\n)(TopupWithdraw);","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\n// Components\r\nimport Log from './Log';\r\nimport TopupWithdraw from './TopupWithdraw';\r\n\r\nclass DataTable extends Component {\r\n\r\n    // this.props.currentTab\r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            a: 1\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let showTable = () => { return \"n/a\" };\r\n    \r\n        switch(this.props.currentTab){\r\n            case \"Log\":\r\n                showTable = () => { return <Log data={this.props.data}/> }\r\n                break;\r\n            case \"Topup / Withdraw\":\r\n                showTable = () => { return <TopupWithdraw data={this.props.data}/> }\r\n                break;\r\n            default:\r\n                showTable = () => { return \"Invalid Choice\" }\r\n                break;\r\n        }\r\n\r\n        return(\r\n            <div className=\"DataTable\">\r\n                {showTable()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataTable;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Portfolio.css';\r\n\r\n// Redux\r\nimport {\r\n    //fetchLogs,\r\n    fetchBrokerId,\r\n    fetchBaseCurrency,\r\n    fetchTargetCurrency,\r\n    fetchLastKey,\r\n    fetchTopupStyle\r\n} from '../actions/UserDataActions';\r\n\r\n\r\n// Components\r\nimport Ribbon from '../components/Ribbon';\r\nimport DataTable from '../components/DataTable';\r\n\r\nclass Portfolio extends Component{\r\n\r\n    // this.props.<redux>\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTab: \"Log\"\r\n        }\r\n\r\n        this.getLogs = this.getLogs.bind(this);\r\n        this.updateCurrentTab = this.updateCurrentTab.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"portfolio\"); // Hacky\r\n        // this.props.fetchLogs(this.props.portfolio); // Use for BEE app // FEE app uses local redux manipulation\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"portfolio\"); // todo1: create constants\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n    }\r\n\r\n    // TODO CHANGE TO BROKERDATA stuff now that we have it\r\n    getBrokerId(brokerName){\r\n        switch(brokerName){\r\n            case 'Interactive Brokers':\r\n                return 'b1';\r\n            case 'Hatch':\r\n                return 'b2';\r\n            case 'Sharsies':\r\n                return 'b3';\r\n            default:\r\n                console.log('> Broker does not exist: ' + brokerName);\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // FEE function to determine which logs we want\r\n    getLogs(){\r\n        for(let i = 0; i < this.props.profileData.listOfProfileData.length; i++){\r\n            if(this.props.profileData.listOfProfileData[i].id === this.getBrokerId(this.props.portfolio)){\r\n                return this.props.profileData.listOfProfileData[i].data.log;\r\n            }\r\n            else{\r\n                console.log('>> Portfolio does not exist for user');\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Portfolio Screen\"> \r\n                <div className=\"BrokerName\"> {this.props.portfolio} </div>\r\n                <Ribbon \r\n                currentTab={this.state.currentTab}\r\n                updateCurrentTab={this.updateCurrentTab} \r\n                />\r\n\r\n                <DataTable \r\n                portfolio={this.props.portfolio}\r\n                currentTab={this.state.currentTab}\r\n                data={this.getLogs()}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        portfolio: state.portfolioNameToShow.name,\r\n        brokers: state.brokers.brokers,\r\n        \r\n        // BEE logs\r\n        // logs: state.logs.logs\r\n\r\n        // FEE logs\r\n        profileData: state.listOfProfileData\r\n    }),\r\n    {\r\n        //fetchLogs\r\n    }\r\n)(Portfolio);","import React, {Component} from 'react';\r\n\r\nclass Settings extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"settings\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"settings\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Settings Screen\">\r\n                Settings works                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;","import React, {Component} from 'react';\r\n\r\nclass About extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"about\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"about\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"About Screen\">\r\n                About works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, {Component} from 'react';\r\n\r\nclass Register extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"register\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"register\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Register Screen\">\r\n                Register works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","import React, {Component} from 'react';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\nclass Menu extends Component{\r\n\r\n    // this.props.toggleMenu\r\n\r\n    render(){\r\n        let linkClassName = \"settings-link\";\r\n        return(\r\n            <div className=\"menu\">\r\n                <div onClick={this.props.toggleMenu} className=\"menu-exit-btn\"> x </div>\r\n                \r\n                <Link to={'/'}><div onClick={this.props.toggleMenu} className={linkClassName}> Home </div></Link>\r\n                <Link to={'/Settings'}><div onClick={this.props.toggleMenu} className={linkClassName}> Settings </div></Link>\r\n                <Link to={'/Login'}><div onClick={this.props.toggleMenu} className={linkClassName}> Login </div></Link>\r\n                <Link to={'/Logout'}><div onClick={this.props.toggleMenu} className={linkClassName}> Logout </div></Link>\r\n                <Link to={'/Register'}><div onClick={this.props.toggleMenu} className={linkClassName}> Register </div></Link>\r\n                <Link to={'/About'}><div onClick={this.props.toggleMenu} className={linkClassName}> About </div></Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\n// Components\r\nimport Menu from './Menu';\r\n\r\nclass Nav extends Component{\r\n    \r\n    // props\r\n    // this.props.screen\r\n    // this.props.isMenuHidden\r\n    // this.props.toggleMenu\r\n\r\n    render(){\r\n        let title;\r\n        let backBtnClassName = \" back-btn \";\r\n        let menuClassName = this.props.isMenuHidden ? \" menu-outer-hidden \" : \" menu-outer \";\r\n\r\n        if(this.props.screen === \"home\"){\r\n            title = \"Select Portfolio\";\r\n            backBtnClassName = \" back-btn-hide \";\r\n        }\r\n        else if(this.props.screen === \"portfolio\"){\r\n            title = \"Portfolio\";\r\n        }\r\n        else if(this.props.screen === \"addBroker\"){\r\n            title = \"Add Broker\";\r\n        }\r\n        else if(this.props.screen === \"login\"){\r\n            title = \"Login\";\r\n        }\r\n        else if(this.props.screen === \"logout\"){\r\n            title = \"Logout\";\r\n        }\r\n        else if(this.props.screen === \"settings\"){\r\n            title = \"Settings\";\r\n        }\r\n        else if(this.props.screen === \"register\"){\r\n            title = \"Register\";\r\n        }\r\n        else if(this.props.screen === \"about\"){\r\n            title = \"About\";\r\n        }\r\n        else if(this.props.screen === \"selectaddtype\"){\r\n            title = \"Add a Log item\";\r\n        }\r\n        else if(this.props.screen === \"AddTopup\"){\r\n            title = \"Add Topup Event\";\r\n        }\r\n\r\n        return(\r\n            <div className=\"Nav\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"col Padding\">\r\n                        <div className={backBtnClassName}>\r\n                            <Link to={'/'}>\r\n                                <div className=\"back-btn-btn\"> ↶ </div>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col Title\">\r\n                        {title}\r\n                    </div>\r\n                    <div className=\"col MenuBtn\">\r\n                        <div className=\"hamburger\" onClick={this.props.toggleMenu}> ☰ </div>\r\n                    </div>\r\n                    <div className={menuClassName}>\r\n                        <Menu\r\n                        toggleMenu={this.props.toggleMenu}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport '../styles/Footer.css';\r\n\r\nexport default function Footer(){\r\n    return(\r\n        <div className=\"Footer\">\r\n            Created by Paul / This is not a Sponsored Product / Recognized_Unrecognized © 2020\r\n        </div>\r\n    );\r\n}\r\n","// Packages\r\nimport './App.css';\r\nimport React, {Component} from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter, Switch, Route, Redirect} from 'react-router-dom';\r\n\r\n// Redux\r\nimport store from './store';\r\n\r\n// Components and Routes\r\nimport AddBroker from './routes/AddBroker';\r\nimport AddTopup from './routes/AddTopup';\r\nimport AddWithdraw from './routes/AddWithdraw';\r\nimport AddBuy from './routes/AddBuy';\r\nimport AddSell from './routes/AddSell';\r\nimport AddFX from './routes/AddFX';\r\nimport AddFee from './routes/AddFee';\r\nimport AddDividend from './routes/AddDividend';\r\nimport SelectAddType from './routes/SelectAddType';\r\nimport Edit from './routes/Edit';\r\nimport Home from './routes/Home';\r\nimport Login from './routes/Login';\r\nimport Logout from './routes/Logout';\r\nimport Portfolio from './routes/Portfolio';\r\nimport Settings from './routes/Settings';\r\nimport About from './routes/About';\r\nimport Register from './routes/Register';\r\n\r\nimport Nav from './components/Nav';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n      this.state ={\r\n        isMenuHidden: true, // TODO Move this into redux store\r\n        screen: \"home\", // TODO Move this into redux store also and connect each child Component to store\r\n      }\r\n\r\n    this.updateScreenName = this.updateScreenName.bind(this);\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n  }\r\n\r\n  toggleMenu = () => {\r\n    this.setState({isMenuHidden: !this.state.isMenuHidden});\r\n  }\r\n\r\n  updateScreenName(screen){\r\n    if(this.state.screen !== screen) this.setState({screen});\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <Provider store={store}>\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n              \r\n              <Nav \r\n              screen={this.state.screen}\r\n              isMenuHidden={this.state.isMenuHidden}\r\n              toggleMenu={this.toggleMenu}\r\n              />\r\n\r\n              <Switch>\r\n                <Route exact path='/' component = {\r\n                  () => <Home \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Portfolio' component = {\r\n                  () => <Portfolio \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddBroker' component = {\r\n                  () => <AddBroker \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddTopup' component = {\r\n                  () => <AddTopup \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/SelectAddType' component = {\r\n                  () => <SelectAddType \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Login' component = {\r\n                  () => <Login \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Logout' component = {\r\n                  () => <Logout \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Edit' component = {\r\n                  () => <Edit \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Settings' component = {\r\n                  () => <Settings \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/About' component = {\r\n                  () => <About \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Register' component = {\r\n                  () => <Register \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Redirect from=\"*\" to=\"/\" />\r\n              </Switch>\r\n\r\n              <Footer />\r\n\r\n            </div>\r\n        </HashRouter>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}