{"version":3,"sources":["store.js","reducers/ProgramReducers.js","reduxtypes.js","reducers/UserDataReducers.js","actions/UserDataActions.js","routes/AddBroker.js","routes/Edit.js","routes/Home.js","actions/ProgramActions.js","routes/Login.js","routes/Logout.js","components/Ribbon.js","components/Notes.js","components/Log.js","components/TopupWithdraw.js","components/DataTable.js","routes/Portfolio.js","routes/Settings.js","routes/About.js","routes/Register.js","components/Menu.js","components/Nav.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","portfolioNameToShow","state","action","type","name","payload","brokers","user1","logs","applyMiddleware","thunk","addToBrokers","oldBrokers","newBroker","dispatch","AddBroker","props","value","handleChange","bind","handleSubmit","event","this","setState","target","brokerToAdd","id","replace","c","r","Math","random","toString","substring","preventDefault","updateScreenName","className","onSubmit","onChange","Component","connect","Edit","Home","fetchPortfolioNameToShow","fetchLogs","undefined","map","broker","i","key","to","onClick","updatePortfolioNameToShow","renderBrokers","fetchBrokers","b1","log","Login","Logout","Ribbon","currentTab","tabs","tab","updateCurrentTab","tabName","getTabs","Notes","isModalVisibleClass","isVisible","closeNotes","notes","Log","showNotes","data","entry","pkey","period","openNotes","notes1","actionStringClassName","includes","date","ticker","bought","sold","console","getData","TopupWithdraw","amountAUD","rate","amountUSD","notes2","DataTable","a","showTable","Portfolio","portfolio","Settings","About","Register","Menu","toggleMenu","Nav","title","backBtnClassName","menuClassName","isMenuHidden","screen","Footer","App","setBrokers","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d5d2693.chunk.js","sourcesContent":["import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Reducers\r\nimport { brokersReducer, logsReducer } from './reducers/UserDataReducers';\r\nimport { portfolioNameToShowReducer } from './reducers/ProgramReducers';\r\n\r\nconst initialState = {};\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    combineReducers({\r\n        // Program Data\r\n        portfolioNameToShow: portfolioNameToShowReducer,\r\n\r\n        // User Data\r\n        brokers: brokersReducer,\r\n        logs: logsReducer\r\n    }),\r\n    initialState,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n    );\r\n\r\nexport default store;","import { \r\n    FETCH_PORTFOLIO_NAME_TO_SHOW,\r\n    UPDATE_PORTFOLIO_NAME_TO_SHOW\r\n} from \"../reduxtypes\";\r\n\r\nexport const portfolioNameToShowReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case FETCH_PORTFOLIO_NAME_TO_SHOW:\r\n            return { name: action.payload };\r\n        case UPDATE_PORTFOLIO_NAME_TO_SHOW:\r\n            return { name: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n};","// Program Data\r\nexport const FETCH_PORTFOLIO_NAME_TO_SHOW = \"FETCH_PORTFOLIO_NAME_TO_SHOW\";\r\nexport const UPDATE_PORTFOLIO_NAME_TO_SHOW = \"UPDATE_PORTFOLIO_NAME_TO_SHOW\";\r\n\r\n// User Data\r\nexport const FETCH_BROKERS = \"FETCH_BROKERS\";\r\nexport const ADD_TO_BROKERS = \"ADD_TO_BROKERS\";\r\nexport const FETCH_LOGS = \"FETCH_LOGS\";\r\nexport const ADD_TO_LOGS = \"ADD_TO_LOGS\";","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from \"../reduxtypes\";\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n\r\nexport const brokersReducer = (state = {brokers: user1.brokers}, action) => { // state = {}\r\n    switch(action.type){\r\n        case FETCH_BROKERS:\r\n            return { brokers: action.payload };\r\n        case ADD_TO_BROKERS:\r\n            return { brokers: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const logsReducer = ( state = {}, action ) => {\r\n    switch(action.type){\r\n        case FETCH_LOGS:\r\n            return { logs: action.payload };\r\n        default: \r\n            return state;\r\n    }\r\n}","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from '../reduxtypes';\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n\r\nexport const fetchBrokers = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_BROKERS,\r\n        payload: user1.brokers\r\n    });\r\n}\r\n\r\nexport const addToBrokers = (oldBrokers, newBroker) => dispatch => { // Front end MVP only\r\n    dispatch({\r\n        type: ADD_TO_BROKERS,\r\n        payload: [\r\n            ...oldBrokers,\r\n            newBroker\r\n        ]\r\n    });\r\n}\r\n\r\nexport const fetchLogs = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_LOGS,\r\n        payload: user1.b1.log\r\n    });\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../styles/AddBroker.css';\r\n\r\n// Redux\r\nimport { \r\n    addToBrokers\r\n} from '../actions/UserDataActions';\r\n\r\nclass AddBroker extends Component{\r\n\r\n    // this.props.addBroker()\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        function uuidv4() {\r\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n              return v.toString(16);\r\n            });\r\n        }\r\n\r\n        let brokerToAdd = {\r\n            name: this.state.value,\r\n            id: uuidv4().substring(0, 8)\r\n        }\r\n        \r\n        this.props.addToBrokers(this.props.brokers, brokerToAdd);\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"addBroker\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"addBroker\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddBroker Screen\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Enter Broker <br/><br/>\r\n                        <input type=\"text\" name=\"name\" value={this.state.value} onChange={this.handleChange} className=\"AddBrokerTextBox\"/>\r\n                    </label>\r\n                    <br/><br/>\r\n                    <p className=\"msg\"> Broker Portfolio Deletion in Settings (Todo: 1. Delete All Data, or 2. Hide from Home) </p>\r\n                    <input type=\"submit\" value=\"Add\" className=\"AddBroker-submit\" />\r\n                </form> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        addToBrokers\r\n    }\r\n)(AddBroker);","import React, {Component} from 'react';\r\n\r\nclass Edit extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Edit Screen\">\r\n                Edit works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Edit;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Home.css';\r\n\r\n// Redux\r\nimport { \r\n    fetchBrokers, \r\n    addToBrokers,\r\n    fetchLogs\r\n} from '../actions/UserDataActions';\r\n\r\nimport { \r\n    fetchPortfolioNameToShow, \r\n    updatePortfolioNameToShow \r\n} from '../actions/ProgramActions';\r\n\r\nclass Home extends Component{\r\n\r\n    // this.props.<redux>\r\n    // this.props.updateScreenName()\r\n    // this.props.brokers\r\n    // this.props.setBrokers()\r\n\r\n    componentDidMount(){\r\n        // this.props.fetchBrokers(); // API Version\r\n        this.props.fetchPortfolioNameToShow();\r\n        this.props.fetchLogs();\r\n        this.props.updateScreenName(\"home\");\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"home\"); // todo1: create constants\r\n    }\r\n\r\n    renderBrokers(){\r\n        if(this.props.brokers === undefined) return \"Loading Brokers\";\r\n        \r\n        return this.props.brokers.map( (broker, i) => {\r\n            return <ul key={i} className=\"Brokers\">\r\n                <Link to={'/Portfolio'}>\r\n                    <li onClick={ () => this.props.updatePortfolioNameToShow(broker.name)} className=\"Broker\">{broker.name}</li>\r\n                </Link>\r\n            </ul>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Home Screen\">\r\n                <div className=\"Brokers\">\r\n                    {this.renderBrokers()}\r\n                </div>\r\n                <div className=\"AddBroker-outer\">\r\n                    <Link to={'/AddBroker'}>\r\n                        <button className=\"Add-broker-btn\">+</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        fetchPortfolioNameToShow, updatePortfolioNameToShow,\r\n        fetchBrokers, addToBrokers, fetchLogs\r\n    }\r\n)(Home);","import { \r\n    FETCH_PORTFOLIO_NAME_TO_SHOW, \r\n    UPDATE_PORTFOLIO_NAME_TO_SHOW \r\n} from '../reduxtypes';\r\n\r\nexport const fetchPortfolioNameToShow = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_PORTFOLIO_NAME_TO_SHOW,\r\n        payload: \"redux-default\"\r\n    });\r\n}\r\n\r\nexport const updatePortfolioNameToShow = (portfolioNameToShow) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n        payload: portfolioNameToShow\r\n    });\r\n}","import React, {Component} from 'react';\r\n\r\nclass Login extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"login\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"login\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Login Screen\">\r\n                Login works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\n\r\nclass Logout extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"logout\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"logout\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Logout Screen\">\r\n                Logout works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logout;","import React, {Component} from 'react';\r\nimport '../styles/Ribbon.css';\r\n\r\nclass Ribbon extends Component {\r\n\r\n    // this.props.updateCurrentTab()\r\n    // this.props.currentTab\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentTab: \"\",\r\n            tabs: [ // todo: Get from user data\r\n                \"Master\",\r\n                \"Holdings\",\r\n                \"Log\",\r\n                \"Topup / Withdraw\",\r\n                \"Buy / Sell\",\r\n                \"Fees\",\r\n                \"Dividends\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.state.currentTab !== this.props.currentTab) this.setState({currentTab: this.props.currentTab});\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n        this.props.updateCurrentTab(tab);\r\n    }\r\n\r\n    getTabs(){\r\n        let defaultClass = \"Tab-inner \";\r\n        let highlightedClass = \" Tab-inner-highlighted\";\r\n        return this.state.tabs.map((tabName, i) => {\r\n            return <li onClick={ () => this.updateCurrentTab(tabName)} className=\"Tab\" key={i}>\r\n                <span className={defaultClass + (tabName === this.state.currentTab ? highlightedClass : \"\")}>{tabName}</span>\r\n            </li>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Ribbon\">\r\n                <ul className=\"Tabs\">\r\n                    {this.getTabs()}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ribbon;","import React, {Component} from 'react';\r\nimport '../styles/Notes.css';\r\n\r\nexport default class Notes extends Component {\r\n    \r\n    // this.props.notes\r\n    // this.props.isVisible\r\n    // this.props.closeNotes\r\n\r\n    render(){\r\n        let isModalVisibleClass = this.props.isVisible ? \" Notes \" : \" Notes-hide \";\r\n\r\n        return(\r\n            <div className={isModalVisibleClass}>\r\n                <div className=\" Notes-exit \" onClick={this.props.closeNotes}>\r\n                    x\r\n                </div>\r\n                <div className=\"Notes-content\">\r\n                    {this.props.notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\n// components \r\nimport Notes from './Notes';\r\n\r\nclass Log extends Component {\r\n    \r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: \"\"\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getData(){\r\n        if(this.props.data === undefined) return <tr><td>must fetch first</td></tr>;\r\n\r\n        return this.props.data.map( (entry, i) => {\r\n            if(entry.type === \"start\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"reg\"){\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"BUY\")){\r\n                    actionStringClassName = \" Buy \";\r\n                }\r\n                else if(entry.action.includes(\"SELL\")){\r\n                    actionStringClassName = \" Sell \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"Dividend\")){\r\n                    actionStringClassName = \" Dividend \";\r\n                }\r\n                else if(entry.action.includes(\"Fee\")){\r\n                    actionStringClassName = \" Fee \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    \r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    \r\n                    <td>{entry.ticker}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end1\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>BOUGHT</b></td>\r\n                    <td>{entry.bought}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end2\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>SOLD</b></td>\r\n                    <td>{entry.sold}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else{\r\n                console.log(\"> ERROR: LOG TYPE DOES NOT EXIST: \" + entry.type);\r\n                return <tr><td>ERROR</td></tr>;\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ref</th>\r\n                            <th>Date</th>\r\n                            <th>Action</th>\r\n                            <th>Symbol</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getData()}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"AddLog\">\r\n                    ADD +\r\n                </div>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Log;","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\nimport Notes from './Notes';\r\n\r\nclass TopupWithdraw extends Component{\r\n\r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: \"\"\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getData(){\r\n        if(this.props.data === undefined) return <tr>\r\n                <td>Must</td>\r\n                <td>Fetch</td>\r\n                <td>First</td>\r\n                <td>From</td>\r\n                <td>The</td>\r\n                <td>User</td>\r\n                <td>ok</td>\r\n            </tr>\r\n\r\n        return this.props.data.map ((entry, i) => {\r\n            if(entry.type === \"end1\" || entry.type === \"end2\") {\r\n                // Continue;\r\n            }\r\n\r\n            else if(entry.type === \"start\"){ // TODO: REFACTOR START ROWS\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n            </tr>\r\n            }\r\n\r\n            else if(entry.action.includes(\"Topup\") ||\r\n            entry.action.includes(\"Withdraw\") ||\r\n            entry.action.includes(\"FX\")){ // TODO: KEEP CONSTANTS AND SCHEMA AS CASE SENSITIVE\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    <td>{entry.amountAUD}</td>\r\n                    <td>{entry.rate}</td>\r\n                    <td>{entry.amountUSD}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes2)}> x </td>\r\n                </tr>\r\n            }\r\n\r\n            console.log(\">> ERROR: TYPE DOES NOT EXIST <TopupWithdraw>\");\r\n            return <tr><td>ERROR</td></tr>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div>\r\n                    <p>Total AUD= </p>\r\n                    <p>Total USD= </p>\r\n                </div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ref</th>\r\n                            <th className=\"Date-topup-withdraw\">Date</th>\r\n                            <th>Action</th>\r\n                            <th>AUD</th>\r\n                            <th>Rate</th>\r\n                            <th>USD</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getData()}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"AddLog\">\r\n                    ADD +\r\n                </div>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopupWithdraw;","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\n// Components\r\nimport Log from './Log';\r\nimport TopupWithdraw from './TopupWithdraw';\r\n\r\nclass DataTable extends Component {\r\n\r\n    // this.props.currentTab\r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            a: 1\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let showTable = () => { return \"n/a\" };\r\n    \r\n        switch(this.props.currentTab){\r\n            case \"Log\":\r\n                showTable = () => { return <Log data={this.props.data}/> }\r\n                break;\r\n            case \"Topup / Withdraw\":\r\n                showTable = () => { return <TopupWithdraw data={this.props.data}/> }\r\n                break;\r\n            default:\r\n                showTable = () => { return \"Invalid Choice\" }\r\n                break;\r\n        }\r\n\r\n        return(\r\n            <div className=\"DataTable\">\r\n                {showTable()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataTable;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Portfolio.css';\r\n\r\n// Components\r\nimport Ribbon from '../components/Ribbon';\r\nimport DataTable from '../components/DataTable';\r\n\r\nclass Portfolio extends Component{\r\n\r\n    // props\r\n    // this.props.<redux>\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTab: \"Topup / Withdraw\"\r\n        }\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"portfolio\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"portfolio\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Portfolio Screen\"> \r\n                <div className=\"BrokerName\"> {this.props.portfolio} </div>\r\n                <Ribbon \r\n                currentTab={this.state.currentTab}\r\n                updateCurrentTab={this.updateCurrentTab.bind(this)} \r\n                />\r\n\r\n                <DataTable \r\n                currentTab={this.state.currentTab}\r\n                data={this.props.logs}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        portfolio: state.portfolioNameToShow.name,\r\n        logs: state.logs.logs\r\n    }),\r\n    {\r\n        \r\n    }\r\n)(Portfolio);","import React, {Component} from 'react';\r\n\r\nclass Settings extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"settings\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"settings\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Settings Screen\">\r\n                Settings works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;","import React, {Component} from 'react';\r\n\r\nclass About extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"about\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"about\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"About Screen\">\r\n                About works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, {Component} from 'react';\r\n\r\nclass Register extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"register\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"register\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Register Screen\">\r\n                Register works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","import React, {Component} from 'react';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\nclass Menu extends Component{\r\n\r\n    // this.props.toggleMenu\r\n\r\n    render(){\r\n        let linkClassName = \"settings-link\";\r\n        return(\r\n            <div className=\"menu\">\r\n                <div onClick={this.props.toggleMenu} className=\"menu-exit-btn\"> x </div>\r\n                \r\n                <Link to={'/'}><div onClick={this.props.toggleMenu} className={linkClassName}> Home </div></Link>\r\n                <Link to={'/Settings'}><div onClick={this.props.toggleMenu} className={linkClassName}> Settings </div></Link>\r\n                <Link to={'/Login'}><div onClick={this.props.toggleMenu} className={linkClassName}> Login </div></Link>\r\n                <Link to={'/Logout'}><div onClick={this.props.toggleMenu} className={linkClassName}> Logout </div></Link>\r\n                <Link to={'/Register'}><div onClick={this.props.toggleMenu} className={linkClassName}> Register </div></Link>\r\n                <Link to={'/About'}><div onClick={this.props.toggleMenu} className={linkClassName}> About </div></Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\n// Components\r\nimport Menu from './Menu';\r\n\r\nclass Nav extends Component{\r\n    \r\n    // props\r\n    // this.props.screen\r\n    // this.props.isMenuHidden\r\n    // this.props.toggleMenu\r\n\r\n    render(){\r\n        let title;\r\n        let backBtnClassName = \" back-btn \";\r\n        let menuClassName = this.props.isMenuHidden ? \" menu-outer-hidden \" : \" menu-outer \";\r\n\r\n        if(this.props.screen === \"home\"){\r\n            title = \"Select Portfolio\";\r\n            backBtnClassName = \" back-btn-hide \";\r\n        }\r\n        else if(this.props.screen === \"portfolio\"){\r\n            title = \"Portfolio\";\r\n        }\r\n        else if(this.props.screen === \"addBroker\"){\r\n            title = \"Add Broker\";\r\n        }\r\n        else if(this.props.screen === \"login\"){\r\n            title = \"Login\";\r\n        }\r\n        else if(this.props.screen === \"logout\"){\r\n            title = \"Logout\";\r\n        }\r\n        else if(this.props.screen === \"settings\"){\r\n            title = \"Settings\";\r\n        }\r\n        else if(this.props.screen === \"register\"){\r\n            title = \"Register\";\r\n        }\r\n        else if(this.props.screen === \"about\"){\r\n            title = \"About\";\r\n        }\r\n\r\n        return(\r\n            <div className=\"Nav\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"col Padding\">\r\n                        <div className={backBtnClassName}>\r\n                            <Link to={'/'}>\r\n                                <div className=\"back-btn-btn\"> ↶ </div>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col Title\">\r\n                        {title}\r\n                    </div>\r\n                    <div className=\"col MenuBtn\">\r\n                        <div className=\"hamburger\" onClick={this.props.toggleMenu}> ☰ </div>\r\n                    </div>\r\n                    <div className={menuClassName}>\r\n                        <Menu\r\n                        toggleMenu={this.props.toggleMenu}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport '../styles/Footer.css';\r\n\r\nexport default function Footer(){\r\n    return(\r\n        <div className=\"Footer\">\r\n            Created by Paul / This is not a Sponsored Product / Recognized_Unrecognized © 2020\r\n        </div>\r\n    );\r\n}\r\n","// Packages\r\nimport './App.css';\r\nimport React, {Component} from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter, Switch, Route, Redirect} from 'react-router-dom';\r\n\r\n// Redux\r\nimport store from './store';\r\n\r\n// Components and Routes\r\nimport AddBroker from './routes/AddBroker';\r\nimport Edit from './routes/Edit';\r\nimport Home from './routes/Home';\r\nimport Login from './routes/Login';\r\nimport Logout from './routes/Logout';\r\nimport Portfolio from './routes/Portfolio';\r\nimport Settings from './routes/Settings';\r\nimport About from './routes/About';\r\nimport Register from './routes/Register';\r\n\r\nimport Nav from './components/Nav';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n      this.state ={\r\n        isMenuHidden: true,\r\n        screen: \"home\",\r\n        brokers: []\r\n      }\r\n\r\n    this.updateScreenName = this.updateScreenName.bind(this);\r\n    this.setBrokers = this.setBrokers.bind(this);\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n  }\r\n\r\n  toggleMenu = () => {\r\n    this.setState({isMenuHidden: !this.state.isMenuHidden});\r\n  }\r\n\r\n  setBrokers = (brokers) => {\r\n    this.setState({brokers});\r\n  }\r\n\r\n  updateScreenName(screen){\r\n    if(this.state.screen !== screen) this.setState({screen});\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <Provider store={store}>\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n              \r\n              <Nav \r\n              screen={this.state.screen}\r\n              isMenuHidden={this.state.isMenuHidden}\r\n              toggleMenu={this.toggleMenu}\r\n              />\r\n\r\n              <Switch>\r\n                <Route exact path='/' component = {\r\n                  () => <Home \r\n                  updateScreenName={this.updateScreenName}\r\n                  brokers={this.state.brokers}\r\n                  setBrokers={this.setBrokers}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Portfolio' component = {\r\n                  () => <Portfolio \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddBroker' component = {\r\n                  () => <AddBroker \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Login' component = {\r\n                  () => <Login \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Logout' component = {\r\n                  () => <Logout \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Edit' component = {\r\n                  () => <Edit \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Settings' component = {\r\n                  () => <Settings \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/About' component = {\r\n                  () => <About \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Register' component = {\r\n                  () => <Register \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Redirect from=\"*\" to=\"/\" />\r\n              </Switch>\r\n\r\n              <Footer />\r\n\r\n            </div>\r\n        </HashRouter>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}