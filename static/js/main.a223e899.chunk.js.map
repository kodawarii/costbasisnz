{"version":3,"sources":["reducers/UserDataReducers.js","reduxtypes.js","store.js","reducers/ProgramReducers.js","actions/UserDataActions.js","routes/AddBroker.js","routes/AddTopup.js","actions/ProgramActions.js","routes/AddWithdraw.js","routes/AddBuy.js","routes/AddSell.js","routes/AddFX.js","routes/AddFee.js","routes/AddDividend.js","routes/SelectAddType.js","routes/Edit.js","routes/Home.js","routes/Login.js","routes/Logout.js","components/Ribbon.js","components/Notes.js","components/Log.js","components/TopupWithdraw.js","components/DataTable.js","routes/Portfolio.js","routes/Settings.js","routes/About.js","routes/Register.js","components/Menu.js","components/Nav.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["profileDataReducer","state","listOfProfileData","user1","action","type","logs","payload","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","portfolioNameToShow","name","topupStyle","brokers","applyMiddleware","thunk","addToBrokers","oldBrokers","newBroker","dispatch","getBrokerId","brokerName","console","log","AddBroker","props","value","handleChange","bind","handleSubmit","event","this","setState","target","brokerToAdd","id","replace","c","r","Math","random","toString","substring","preventDefault","updateScreenName","className","onSubmit","onChange","Component","connect","AddTopup","amountSent","rate","amountLanded","notes","getTopupForm_TYPE_CONVERT","getTopupForm_TYPE_NATIVE","handleChangeAmountSent","handleChangeAmountLanded","handleChangeConversionRate","handleChangeNotes","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","substr","logToAdd","pkey","date","notes1","amount","notes2","addToLogs","portfolio","fetchTopupStyle","currency","formToShow","currentBroker","i","length","brokerNameToAddTo","newLog","data","push","SelectAddType","liClassName","to","Edit","Home","fetchPortfolioNameToShow","undefined","map","broker","key","onClick","updatePortfolioNameToShow","renderBrokers","fetchBrokers","Login","Logout","Ribbon","currentTab","tabs","tab","updateCurrentTab","tabName","getTabs","Notes","isModalVisibleClass","isVisible","closeNotes","Log","showNotes","entry","period","openNotes","actionStringClassName","includes","ticker","bought","sold","getData","TopupWithdraw","amountAUD","amountUSD","DataTable","a","showTable","Portfolio","getLogs","profileData","fetchLogs","b1","b2","b3","Settings","About","Register","Menu","toggleMenu","Nav","title","backBtnClassName","menuClassName","isMenuHidden","screen","Footer","App","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a223e899.chunk.js","sourcesContent":["import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from \"../reduxtypes\";\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n\r\nexport const brokersReducer = (state = {brokers: user1.brokers}, action) => { // state = {}\r\n    switch(action.type){\r\n        case FETCH_BROKERS:\r\n            return { brokers: action.payload };\r\n        case ADD_TO_BROKERS:\r\n            return { brokers: action.payload };\r\n        default:\r\n            // retrieving the default store from mock data for the front end mvp app, when we have backend API, state={}\r\n            // Then we manipulate that local copy (FETCH_BROEKRS is only used when we have backend)\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const profileDataReducer = ( state = {listOfProfileData: user1.listOfProfileData}, action ) => { // Hard coded fetching only for the FEE app\r\n    switch(action.type){\r\n        case FETCH_LOGS:\r\n            return { logs: action.payload }; // BEE app fetches specific log for current portfolio\r\n        case ADD_TO_LOGS:\r\n            return { listOfProfileData: action.payload }; // FEE uses listOfProfileData\r\n        default:\r\n            return state;\r\n    }\r\n}","// Program Data\r\nexport const FETCH_PORTFOLIO_NAME_TO_SHOW = \"FETCH_PORTFOLIO_NAME_TO_SHOW\";\r\nexport const UPDATE_PORTFOLIO_NAME_TO_SHOW = \"UPDATE_PORTFOLIO_NAME_TO_SHOW\";\r\nexport const FETCH_TOPUPSTYLE = \"FETCH_TOPUPSTYLE\"; // FROM CURRENT BROKER\r\n\r\n// User Data\r\nexport const FETCH_BROKERS = \"FETCH_BROKERS\";\r\nexport const ADD_TO_BROKERS = \"ADD_TO_BROKERS\";\r\nexport const FETCH_LOGS = \"FETCH_LOGS\";\r\nexport const ADD_TO_LOGS = \"ADD_TO_LOGS\";","import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Reducers\r\nimport { brokersReducer, profileDataReducer } from './reducers/UserDataReducers';\r\nimport { portfolioNameToShowReducer, topupStyleReducer } from './reducers/ProgramReducers';\r\n\r\nconst initialState = {};\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    combineReducers({\r\n        // Program Data\r\n        portfolioNameToShow: portfolioNameToShowReducer,\r\n        topupStyle: topupStyleReducer,\r\n\r\n        // User Data\r\n        brokers: brokersReducer,\r\n        logs: profileDataReducer,\r\n        listOfProfileData: profileDataReducer\r\n    }),\r\n    initialState,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n    );\r\n\r\nexport default store;","import { \r\n    FETCH_PORTFOLIO_NAME_TO_SHOW,\r\n    UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n    FETCH_TOPUPSTYLE\r\n} from \"../reduxtypes\";\r\n\r\nexport const portfolioNameToShowReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case FETCH_PORTFOLIO_NAME_TO_SHOW:\r\n            return { name: action.payload };\r\n        case UPDATE_PORTFOLIO_NAME_TO_SHOW:\r\n            return { name: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const topupStyleReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case FETCH_TOPUPSTYLE:\r\n            return { topupStyle: action.payload };\r\n        default: \r\n            return state;\r\n    }\r\n};","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from '../reduxtypes';\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n// In order to CRUD this mock data, we need to create a local copy within redux store - phase1=brokers, phase2=logs\r\n// so 1. we have local copy data, then manipulate that local copy\r\n// 2. when we have backend api and db, no longer local changes\r\n\r\n// We will use this in the future when making backend API calls // phase1\r\nexport const fetchBrokers = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_BROKERS,\r\n        payload: user1.brokers\r\n    });\r\n}\r\n\r\nexport const addToBrokers = (oldBrokers, newBroker) => dispatch => { // We are only adding the new broker to the local client redux front end store (will be different when we have backend API)\r\n    dispatch({\r\n        type: ADD_TO_BROKERS,\r\n        payload: [\r\n            ...oldBrokers,\r\n            newBroker\r\n        ]\r\n    });\r\n}\r\n\r\n\r\n// To use in BEE app\r\nexport const fetchLogs = (portfolio) => dispatch => {\r\n    switch(portfolio){\r\n        case \"Interactive Brokers\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b1.log\r\n            });\r\n            break;\r\n        case \"Hatch\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b2.log\r\n            });\r\n            break;\r\n        case \"Sharsies\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b3.log\r\n            });\r\n            break;\r\n        default:\r\n            dispatch({\r\n                type: FETCH_LOGS, // TODO: have error throwing reducer\r\n                payload: [{\r\n                    \"type\": \"start\",\r\n                    \"period\": \"Error - User does not have that portfolio / any entries within that portfolio\"\r\n                }]\r\n            })\r\n            console.log(\">> ID DOES NOT EXIST\");\r\n            break;\r\n    }\r\n}\r\n\r\nexport const addToLogs = (listOfProfileData, brokerNameToAddTo, newLog) => dispatch => {\r\n\r\n    // need to take care of immutables\r\n    for(let i = 0; i < listOfProfileData.listOfProfileData.length; i++){\r\n        if(listOfProfileData.listOfProfileData[i].id === getBrokerId(brokerNameToAddTo)){\r\n            listOfProfileData.listOfProfileData[i].data.log.push(newLog);\r\n        }\r\n    }\r\n\r\n    dispatch({\r\n        type: ADD_TO_LOGS,\r\n        payload: listOfProfileData.listOfProfileData\r\n        \r\n    });\r\n}\r\n\r\n// TODO Globalize this function\r\nfunction getBrokerId(brokerName){\r\n    switch(brokerName){\r\n        case 'Interactive Brokers':\r\n            return 'b1';\r\n        case 'Hatch':\r\n            return 'b2';\r\n        case 'Sharsies':\r\n            return 'b3';\r\n        default:\r\n            console.log('> Broker does not exist: ' + brokerName);\r\n            return null;\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    addToBrokers\r\n} from '../actions/UserDataActions';\r\n\r\nclass AddBroker extends Component{\r\n\r\n    // this.props.addBroker()\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        function uuidv4() {\r\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n              return v.toString(16);\r\n            });\r\n        }\r\n\r\n        let brokerToAdd = {\r\n            name: this.state.value,\r\n            id: uuidv4().substring(0, 8)\r\n        };\r\n        \r\n        this.props.addToBrokers(this.props.brokers, brokerToAdd);\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"addBroker\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"addBroker\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddData AddBroker Screen\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Enter Broker <br/><br/>\r\n                        <input type=\"text\" name=\"name\" value={this.state.value} onChange={this.handleChange} className=\"AddDataTextBox\"/>\r\n                    </label>\r\n                    <br/><br/>\r\n                    <p className=\"msg\"> Broker Portfolio Deletion in Settings (Todo: 1. Delete All Data, or 2. Hide from Home) </p>\r\n                    <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n                </form> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        addToBrokers\r\n    }\r\n)(AddBroker);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    fetchTopupStyle\r\n} from '../actions/ProgramActions';\r\n\r\nimport {\r\n    addToLogs\r\n} from '../actions/UserDataActions';\r\n\r\nclass AddTopup extends Component{\r\n\r\n    // this.props.\r\n\r\n    // Other Notes\r\n    // There are 2 types of topups (so far...)\r\n    // 1. Native (IBKR, Sharsies)\r\n    // 2. Convert (Hatch)\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            action: 'Topup', // TODO: Change to Parameter string from external json constants\r\n            amountSent: '',\r\n            rate: '',\r\n            amountLanded: '',\r\n            notes: '' // TODO: Handle notes1 or notes2 - did we arrive on AddTopup Section via log ribbon OR topup/withdraw ribbon ?\r\n        }\r\n\r\n        this.getTopupForm_TYPE_CONVERT = this.getTopupForm_TYPE_CONVERT.bind(this);\r\n        this.getTopupForm_TYPE_NATIVE = this.getTopupForm_TYPE_NATIVE.bind(this);\r\n        this.handleChangeAmountSent = this.handleChangeAmountSent.bind(this);\r\n        this.handleChangeAmountLanded = this.handleChangeAmountLanded.bind(this);\r\n        this.handleChangeConversionRate = this.handleChangeConversionRate.bind(this);\r\n        this.handleChangeNotes = this.handleChangeNotes.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    getDate(){\r\n        var today = new Date();\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\r\n        var yyyy = today.getFullYear();\r\n\r\n        return yyyy.toString().substr(2,2) + '-' + mm + '-' + dd;\r\n    }\r\n\r\n    handleChangeNotes(event){\r\n        this.setState({notes: event.target.value});\r\n    }\r\n\r\n    handleChangeConversionRate(event){\r\n        this.setState({rate: event.target.value});\r\n    }\r\n\r\n    handleChangeAmountLanded(event){\r\n        this.setState({amountLanded: event.target.value});\r\n    }\r\n\r\n    handleChangeAmountSent(event){\r\n        this.setState({amountSent: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        if(this.props.topupStyle === 'native'){\r\n            let logToAdd = {\r\n                type: 'reg',\r\n                pkey: 0,\r\n                date: this.getDate(),\r\n                action: 'Topup',\r\n                notes1: this.state.notes,\r\n\r\n                amount: this.state.amountLanded,\r\n                notes2: this.state.notes // TODO notes2 implementation\r\n            };\r\n            \r\n            this.props.addToLogs(this.props.listOfProfileData, this.props.portfolio, logToAdd);\r\n        }\r\n        else if(this.props.topupStyle === 'convert'){\r\n            let logToAdd = {\r\n                type: 'reg',\r\n                pkey: 0,\r\n                date: this.getDate(),\r\n                action: 'Topup',\r\n                notes1: this.state.notes,\r\n\r\n                amountSent: this.state.amountSent,\r\n                rate: this.state.rate,\r\n                amountLanded: this.state.amountLanded,\r\n                notes2: this.state.notes // TODO notes2 implementation\r\n            };\r\n            \r\n            this.props.addToLogs(this.props.listOfProfileData, this.props.portfolio, logToAdd);\r\n        }\r\n        else{\r\n            console.log(\">> TopupStyle Does not exist: \" + this.props.topupStyle);\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.fetchTopupStyle(this.props.brokers, this.props.portfolio); // This will be buggy af - assuiming we only access AddTopup after choosing a portfolio - URL injection will crash\r\n        this.props.updateScreenName(\"AddTopup\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddTopup\"); // todo1: create constants\r\n    }\r\n\r\n    // TODO: Add Number Validations\r\n    getTopupForm_TYPE_NATIVE(currency){\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                \r\n                Topup Amount ({currency})\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountLanded\" value={this.state.amountLanded} onChange={this.handleChangeAmountLanded} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                Notes\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountLanded\" value={this.state.notes} onChange={this.handleChangeNotes} className=\"AddDataTextBox\"/>\r\n            \r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form> \r\n    }\r\n\r\n    // TODO: Add Number Validations\r\n    getTopupForm_TYPE_CONVERT(currency){\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                \r\n                Amount sent \r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountSent\" value={this.state.amountSent} onChange={this.handleChangeAmountSent} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                Conversion Rate \r\n                <br/><br/>\r\n                <input type=\"text\" name=\"rate\" value={this.state.rate} onChange={this.handleChangeConversionRate} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n                \r\n                Amount Recieved ({currency})\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountLanded\" value={this.state.amountLanded} onChange={this.handleChangeAmountLanded} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                Notes\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountLanded\" value={this.state.notes} onChange={this.handleChangeNotes} className=\"AddDataTextBox\"/>\r\n\r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form>\r\n    }\r\n\r\n    render(){\r\n\r\n        // TODO: add Base Currency to user1 data against the broker\r\n        let currency = '';\r\n        if(this.props.portfolio === 'Interactive Brokers'){\r\n            currency = 'AUD';\r\n        }\r\n        else if(this.props.portfolio === 'Hatch'){\r\n            currency = 'USD';\r\n        }\r\n        else if(this.props.portfolio === 'Sharsies'){\r\n            currency = 'NZD';\r\n        }\r\n        \r\n        let formToShow;\r\n        if(this.props.topupStyle === 'native'){\r\n            formToShow = () => this.getTopupForm_TYPE_NATIVE(currency);\r\n        }\r\n        else if(this.props.topupStyle === 'convert'){\r\n            formToShow = () => this.getTopupForm_TYPE_CONVERT(currency);\r\n        }\r\n        else{\r\n            console.log('>> THAT TOPUP STYLE DOES NOT EXIST');\r\n            formToShow = () => <div> ERROR </div>;\r\n        }\r\n\r\n        return(\r\n            <div className=\"AddData AddTopup Screen\">\r\n                <h4>{this.props.portfolio}</h4>\r\n                {formToShow()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        portfolio: state.portfolioNameToShow.name,\r\n        brokers: state.brokers.brokers,\r\n        topupStyle: state.topupStyle.topupStyle,\r\n\r\n        // BEE backend db logs\r\n        // logs: state.logs.logs // care at logs vs log lol\r\n\r\n        // FEE local redux logs\r\n        listOfProfileData: state.listOfProfileData\r\n    }),\r\n    {\r\n        fetchTopupStyle,\r\n        addToLogs\r\n    }\r\n)(AddTopup);","import { \r\n    FETCH_PORTFOLIO_NAME_TO_SHOW, \r\n    UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n    FETCH_TOPUPSTYLE\r\n} from '../reduxtypes';\r\n\r\nexport const fetchPortfolioNameToShow = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_PORTFOLIO_NAME_TO_SHOW,\r\n        payload: \"redux-default\"\r\n    });\r\n}\r\n\r\nexport const updatePortfolioNameToShow = (portfolioNameToShow) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n        payload: portfolioNameToShow\r\n    });\r\n}\r\n\r\nexport const fetchTopupStyle = (brokers, currentBroker) => dispatch => { // TODO Test action, heavily exposed to bugs\r\n    let topupStyle = '';\r\n    for(let i = 0; i < brokers.length; i++){\r\n        if(brokers[i].name === currentBroker){ // TODO Create Broker Name <> ID Converter \r\n            topupStyle = brokers[i].topupStyle;\r\n        }\r\n    }\r\n\r\n    dispatch({\r\n        type: FETCH_TOPUPSTYLE,\r\n        payload: topupStyle\r\n    });\r\n}","import React, {Component} from 'react';\r\n\r\nclass AddWithdraw extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddWithdraw\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddWithdraw\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddWithdraw Screen\">\r\n                AddWithdraw works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddWithdraw;","import React, {Component} from 'react';\r\n\r\nclass AddBuy extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddBuy\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddBuy\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddBuy Screen\">\r\n                AddBuy works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddBuy;","import React, {Component} from 'react';\r\n\r\nclass AddSell extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddSell\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddSell\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddSell Screen\">\r\n                AddSell works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddSell;","import React, {Component} from 'react';\r\n\r\nclass AddFX extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddFX\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddFX\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddFX Screen\">\r\n                AddFX works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddFX;","import React, {Component} from 'react';\r\n\r\nclass AddFee extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddFee\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddFee\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddFee Screen\">\r\n                AddFee works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddFee;","import React, {Component} from 'react';\r\n\r\nclass AddDividend extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddDividend\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddDividend\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddDividend Screen\">\r\n                AddDividend works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddDividend;","import React, {Component} from 'react';\r\nimport '../styles/SelectAddType.css';\r\n\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\n\r\nclass SelectAddType extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"selectaddtype\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"selectaddtype\"); // todo1: create constants\r\n    }\r\n\r\n    // TODO: Enumerate in external constants file\r\n    render(){\r\n        let liClassName = \"SelectAddType-li\";\r\n        return(\r\n            <div className=\"SelectAddType Screen\">\r\n                <h4> Select Type of Log </h4>\r\n                <ul className=\"SelectAddType-ul\">\r\n                    <Link to={'/AddTopup'}><li className={liClassName+\" AddTopup-li\"}> 1. Topup </li></Link>\r\n                    <Link to={'/AddWithdraw'}><li className={liClassName+\" AddWithdraw-li\"}> 2. Withdraw </li></Link>\r\n                    <Link to={'/AddFX'}><li className={liClassName+\" AddFX-li\"}> 3. FX </li></Link>\r\n                    <Link to={'/AddBuy'}><li className={liClassName+\" AddBuy-li\"}> 4. Buy </li></Link>\r\n                    <Link to={'/AddSell'}><li className={liClassName+\" AddSell-li\"}> 5. Sell </li></Link>\r\n                    <Link to={'/AddDividend'}><li className={liClassName+\" AddDividend-li\"}> 6. Dividend </li></Link>\r\n                    <Link to={'/AddFee'}><li className={liClassName+\" AddFee-li\"}> 7. Fee </li></Link>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectAddType;","import React, {Component} from 'react';\r\n\r\nclass Edit extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Edit Screen\">\r\n                Edit works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Edit;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Home.css';\r\n\r\n// Redux\r\nimport { \r\n    fetchBrokers, \r\n    addToBrokers,\r\n    fetchLogs\r\n} from '../actions/UserDataActions';\r\n\r\nimport { \r\n    fetchPortfolioNameToShow, \r\n    updatePortfolioNameToShow \r\n} from '../actions/ProgramActions';\r\n\r\nclass Home extends Component{\r\n\r\n    // this.props.<redux>\r\n    // this.props.updateScreenName()\r\n    // this.props.brokers\r\n\r\n    componentDidMount(){\r\n        // this.props.fetchBrokers(); // To use when we have backend API implemented\r\n        this.props.fetchPortfolioNameToShow();\r\n        this.props.updateScreenName(\"home\");\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"home\"); // todo1: create constants\r\n    }\r\n\r\n    renderBrokers(){\r\n        if(this.props.brokers === undefined) return \"Loading Brokers\";\r\n        \r\n        return this.props.brokers.map( (broker, i) => {\r\n            return <ul key={i} className=\"Brokers\">\r\n                <Link to={'/Portfolio'}>\r\n                    <li onClick={ () => this.props.updatePortfolioNameToShow(broker.name)} className=\"Broker\">{broker.name}</li>\r\n                </Link>\r\n            </ul>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Home Screen\">\r\n                <div className=\"Brokers\">\r\n                    {this.renderBrokers()}\r\n                </div>\r\n                <div className=\"AddBrokerBtn-wrapper\">\r\n                    <Link to={'/AddBroker'}>\r\n                        <button className=\"AddBtn\">+</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        fetchPortfolioNameToShow, updatePortfolioNameToShow,\r\n        fetchBrokers, addToBrokers\r\n    }\r\n)(Home);","import React, {Component} from 'react';\r\n\r\nclass Login extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"login\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"login\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Login Screen\">\r\n                Login works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\n\r\nclass Logout extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"logout\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"logout\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Logout Screen\">\r\n                Logout works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logout;","import React, {Component} from 'react';\r\nimport '../styles/Ribbon.css';\r\n\r\nclass Ribbon extends Component {\r\n\r\n    // this.props.updateCurrentTab()\r\n    // this.props.currentTab\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentTab: \"\",\r\n            tabs: [ // todo: Get from user data\r\n                \"Master\",\r\n                \"Holdings\",\r\n                \"Log\",\r\n                \"Topup / Withdraw\",\r\n                \"Buy / Sell\",\r\n                \"Fees\",\r\n                \"Dividends\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.state.currentTab !== this.props.currentTab) this.setState({currentTab: this.props.currentTab});\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n        this.props.updateCurrentTab(tab);\r\n    }\r\n\r\n    getTabs(){\r\n        let defaultClass = \"Tab-inner \";\r\n        let highlightedClass = \" Tab-inner-highlighted\";\r\n        return this.state.tabs.map((tabName, i) => {\r\n            return <li onClick={ () => this.updateCurrentTab(tabName)} className=\"Tab\" key={i}>\r\n                <span className={defaultClass + (tabName === this.state.currentTab ? highlightedClass : \"\")}>{tabName}</span>\r\n            </li>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Ribbon\">\r\n                <ul className=\"Tabs\">\r\n                    {this.getTabs()}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ribbon;","import React, {Component} from 'react';\r\nimport '../styles/Notes.css';\r\n\r\nexport default class Notes extends Component {\r\n    \r\n    // this.props.notes\r\n    // this.props.isVisible\r\n    // this.props.closeNotes\r\n\r\n    render(){\r\n        let isModalVisibleClass = this.props.isVisible ? \" Notes \" : \" Notes-hide \";\r\n\r\n        return(\r\n            <div className={isModalVisibleClass}>\r\n                <div className=\" Notes-exit \" onClick={this.props.closeNotes}>\r\n                    x\r\n                </div>\r\n                <div className=\"Notes-content\">\r\n                    {this.props.notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/DataTable.css';\r\n\r\n// Components \r\nimport Notes from './Notes';\r\n\r\nclass Log extends Component {\r\n    \r\n    // this.props.data\r\n    // this.props.portfolio\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: \"\"\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    // TODO: add feature where Show Notes Link only if there is a note\r\n    getData(){\r\n        if(this.props.data === undefined) return <tr><td>must fetch first</td></tr>;\r\n\r\n        return this.props.data.map( (entry, i) => {\r\n            if(entry.type === \"start\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"reg\"){\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"BUY\")){\r\n                    actionStringClassName = \" Buy \";\r\n                }\r\n                else if(entry.action.includes(\"SELL\")){\r\n                    actionStringClassName = \" Sell \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"Dividend\")){\r\n                    actionStringClassName = \" Dividend \";\r\n                }\r\n                else if(entry.action.includes(\"Fee\")){\r\n                    actionStringClassName = \" Fee \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    \r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    \r\n                    <td>{entry.ticker}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end1\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>BOUGHT</b></td>\r\n                    <td>{entry.bought}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end2\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>SOLD</b></td>\r\n                    <td>{entry.sold}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else{\r\n                // This can be here since log captures ALL types of activity\r\n                console.log(\"> ERROR: LOG TYPE DOES NOT EXIST: \" + entry.type);\r\n                return <tr><td>ERROR</td></tr>;\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ref</th>\r\n                            <th>Date</th>\r\n                            <th>Action</th>\r\n                            <th>Symbol</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getData()}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <Link to={'/SelectAddType'}>\r\n                    <div className=\"AddLogBtn-wrapper\">\r\n                        <button className=\"AddBtn\">+</button>\r\n                    </div>\r\n                </Link>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Log;","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\nimport Notes from './Notes';\r\n\r\nclass TopupWithdraw extends Component{\r\n\r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: \"\"\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getData(){\r\n        if(this.props.data === undefined) return <tr>\r\n                <td>Must</td>\r\n                <td>Fetch</td>\r\n                <td>First</td>\r\n                <td>From</td>\r\n                <td>The</td>\r\n                <td>User</td>\r\n                <td>ok</td>\r\n            </tr>\r\n\r\n        return this.props.data.map ((entry, i) => {\r\n            if(entry.type === \"end1\" || entry.type === \"end2\") {\r\n                // Continue;\r\n            }\r\n            else if(entry.type === \"start\"){ // TODO: REFACTOR START ROWS\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n            </tr>\r\n            }\r\n            else if(entry.action.includes(\"Topup\") ||\r\n            entry.action.includes(\"Withdraw\") ||\r\n            entry.action.includes(\"FX\")){ // TODO: KEEP CONSTANTS AND SCHEMA AS CASE SENSITIVE\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n                \r\n\r\n                // TODO: IBKR HATCH AND SHARIES WILL HAVE DIFFERENT FORMAT\r\n                // --.amountAUD no longer applies here\r\n                // 1. native topup 2. convert topup\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    <td>{entry.amountAUD}</td>\r\n                    <td>{entry.rate}</td>\r\n                    <td>{entry.amountUSD}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes2)}> x </td>\r\n                </tr>\r\n            }\r\n\r\n            // return something\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div>\r\n                    <p>Total AUD= </p>\r\n                    <p>Total USD= </p>\r\n                </div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ref</th>\r\n                            <th className=\"Date-topup-withdraw\">Date</th>\r\n                            <th>Action</th>\r\n                            <th>AUD</th>\r\n                            <th>Rate</th>\r\n                            <th>USD</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getData()}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"AddLog\">\r\n                    ADD + // go direct to addTopupWithdraw page\r\n                </div>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopupWithdraw;","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\n// Components\r\nimport Log from './Log';\r\nimport TopupWithdraw from './TopupWithdraw';\r\n\r\nclass DataTable extends Component {\r\n\r\n    // this.props.currentTab\r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            a: 1\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let showTable = () => { return \"n/a\" };\r\n    \r\n        switch(this.props.currentTab){\r\n            case \"Log\":\r\n                showTable = () => { return <Log data={this.props.data}/> }\r\n                break;\r\n            case \"Topup / Withdraw\":\r\n                showTable = () => { return <TopupWithdraw data={this.props.data}/> }\r\n                break;\r\n            default:\r\n                showTable = () => { return \"Invalid Choice\" }\r\n                break;\r\n        }\r\n\r\n        return(\r\n            <div className=\"DataTable\">\r\n                {showTable()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataTable;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Portfolio.css';\r\n\r\n// Redux\r\nimport {\r\n    fetchLogs\r\n} from '../actions/UserDataActions';\r\n\r\n\r\n// Components\r\nimport Ribbon from '../components/Ribbon';\r\nimport DataTable from '../components/DataTable';\r\n\r\nclass Portfolio extends Component{\r\n\r\n    // this.props.<redux>\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTab: \"Log\"\r\n        }\r\n\r\n        this.getLogs = this.getLogs.bind(this);\r\n        this.updateCurrentTab = this.updateCurrentTab.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"portfolio\"); // Hacky\r\n        // this.props.fetchLogs(this.props.portfolio); // Use for BEE app // FEE app uses local redux manipulation\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"portfolio\"); // todo1: create constants\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n    }\r\n\r\n    // TODO Globalize this function\r\n    getBrokerId(brokerName){\r\n        switch(brokerName){\r\n            case 'Interactive Brokers':\r\n                return 'b1';\r\n            case 'Hatch':\r\n                return 'b2';\r\n            case 'Sharsies':\r\n                return 'b3';\r\n            default:\r\n                console.log('> Broker does not exist: ' + brokerName);\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // FEE function to determine which logs we want\r\n    getLogs(){\r\n        for(let i = 0; i < this.props.profileData.listOfProfileData.length; i++){\r\n            if(this.props.profileData.listOfProfileData[i].id === this.getBrokerId(this.props.portfolio)){\r\n                return this.props.profileData.listOfProfileData[i].data.log;\r\n            }\r\n            else{\r\n                console.log('>> Portfolio does not exist for user');\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Portfolio Screen\"> \r\n                <div className=\"BrokerName\"> {this.props.portfolio} </div>\r\n                <Ribbon \r\n                currentTab={this.state.currentTab}\r\n                updateCurrentTab={this.updateCurrentTab} \r\n                />\r\n\r\n                <DataTable \r\n                portfolio={this.props.portfolio}\r\n                currentTab={this.state.currentTab}\r\n                data={this.getLogs()}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        portfolio: state.portfolioNameToShow.name,\r\n        \r\n        // BEE logs\r\n        // logs: state.logs.logs\r\n\r\n        // FEE logs\r\n        profileData: state.listOfProfileData\r\n    }),\r\n    {\r\n        fetchLogs\r\n    }\r\n)(Portfolio);","import React, {Component} from 'react';\r\n\r\nclass Settings extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"settings\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"settings\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Settings Screen\">\r\n                Settings works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;","import React, {Component} from 'react';\r\n\r\nclass About extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"about\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"about\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"About Screen\">\r\n                About works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, {Component} from 'react';\r\n\r\nclass Register extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"register\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"register\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Register Screen\">\r\n                Register works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","import React, {Component} from 'react';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\nclass Menu extends Component{\r\n\r\n    // this.props.toggleMenu\r\n\r\n    render(){\r\n        let linkClassName = \"settings-link\";\r\n        return(\r\n            <div className=\"menu\">\r\n                <div onClick={this.props.toggleMenu} className=\"menu-exit-btn\"> x </div>\r\n                \r\n                <Link to={'/'}><div onClick={this.props.toggleMenu} className={linkClassName}> Home </div></Link>\r\n                <Link to={'/Settings'}><div onClick={this.props.toggleMenu} className={linkClassName}> Settings </div></Link>\r\n                <Link to={'/Login'}><div onClick={this.props.toggleMenu} className={linkClassName}> Login </div></Link>\r\n                <Link to={'/Logout'}><div onClick={this.props.toggleMenu} className={linkClassName}> Logout </div></Link>\r\n                <Link to={'/Register'}><div onClick={this.props.toggleMenu} className={linkClassName}> Register </div></Link>\r\n                <Link to={'/About'}><div onClick={this.props.toggleMenu} className={linkClassName}> About </div></Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\n// Components\r\nimport Menu from './Menu';\r\n\r\nclass Nav extends Component{\r\n    \r\n    // props\r\n    // this.props.screen\r\n    // this.props.isMenuHidden\r\n    // this.props.toggleMenu\r\n\r\n    render(){\r\n        let title;\r\n        let backBtnClassName = \" back-btn \";\r\n        let menuClassName = this.props.isMenuHidden ? \" menu-outer-hidden \" : \" menu-outer \";\r\n\r\n        if(this.props.screen === \"home\"){\r\n            title = \"Select Portfolio\";\r\n            backBtnClassName = \" back-btn-hide \";\r\n        }\r\n        else if(this.props.screen === \"portfolio\"){\r\n            title = \"Portfolio\";\r\n        }\r\n        else if(this.props.screen === \"addBroker\"){\r\n            title = \"Add Broker\";\r\n        }\r\n        else if(this.props.screen === \"login\"){\r\n            title = \"Login\";\r\n        }\r\n        else if(this.props.screen === \"logout\"){\r\n            title = \"Logout\";\r\n        }\r\n        else if(this.props.screen === \"settings\"){\r\n            title = \"Settings\";\r\n        }\r\n        else if(this.props.screen === \"register\"){\r\n            title = \"Register\";\r\n        }\r\n        else if(this.props.screen === \"about\"){\r\n            title = \"About\";\r\n        }\r\n        else if(this.props.screen === \"selectaddtype\"){\r\n            title = \"Add a Log item\";\r\n        }\r\n        else if(this.props.screen === \"AddTopup\"){\r\n            title = \"Add Topup Event\";\r\n        }\r\n\r\n        return(\r\n            <div className=\"Nav\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"col Padding\">\r\n                        <div className={backBtnClassName}>\r\n                            <Link to={'/'}>\r\n                                <div className=\"back-btn-btn\"> ↶ </div>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col Title\">\r\n                        {title}\r\n                    </div>\r\n                    <div className=\"col MenuBtn\">\r\n                        <div className=\"hamburger\" onClick={this.props.toggleMenu}> ☰ </div>\r\n                    </div>\r\n                    <div className={menuClassName}>\r\n                        <Menu\r\n                        toggleMenu={this.props.toggleMenu}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport '../styles/Footer.css';\r\n\r\nexport default function Footer(){\r\n    return(\r\n        <div className=\"Footer\">\r\n            Created by Paul / This is not a Sponsored Product / Recognized_Unrecognized © 2020\r\n        </div>\r\n    );\r\n}\r\n","// Packages\r\nimport './App.css';\r\nimport React, {Component} from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter, Switch, Route, Redirect} from 'react-router-dom';\r\n\r\n// Redux\r\nimport store from './store';\r\n\r\n// Components and Routes\r\nimport AddBroker from './routes/AddBroker';\r\nimport AddTopup from './routes/AddTopup';\r\nimport AddWithdraw from './routes/AddWithdraw';\r\nimport AddBuy from './routes/AddBuy';\r\nimport AddSell from './routes/AddSell';\r\nimport AddFX from './routes/AddFX';\r\nimport AddFee from './routes/AddFee';\r\nimport AddDividend from './routes/AddDividend';\r\nimport SelectAddType from './routes/SelectAddType';\r\nimport Edit from './routes/Edit';\r\nimport Home from './routes/Home';\r\nimport Login from './routes/Login';\r\nimport Logout from './routes/Logout';\r\nimport Portfolio from './routes/Portfolio';\r\nimport Settings from './routes/Settings';\r\nimport About from './routes/About';\r\nimport Register from './routes/Register';\r\n\r\nimport Nav from './components/Nav';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n      this.state ={\r\n        isMenuHidden: true, // TODO Move this into redux store\r\n        screen: \"home\", // TODO Move this into redux store also and connect each child Component to store\r\n      }\r\n\r\n    this.updateScreenName = this.updateScreenName.bind(this);\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n  }\r\n\r\n  toggleMenu = () => {\r\n    this.setState({isMenuHidden: !this.state.isMenuHidden});\r\n  }\r\n\r\n  updateScreenName(screen){\r\n    if(this.state.screen !== screen) this.setState({screen});\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <Provider store={store}>\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n              \r\n              <Nav \r\n              screen={this.state.screen}\r\n              isMenuHidden={this.state.isMenuHidden}\r\n              toggleMenu={this.toggleMenu}\r\n              />\r\n\r\n              <Switch>\r\n                <Route exact path='/' component = {\r\n                  () => <Home \r\n                  updateScreenName={this.updateScreenName}\r\n                  brokers={this.state.brokers}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Portfolio' component = {\r\n                  () => <Portfolio \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddBroker' component = {\r\n                  () => <AddBroker \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddTopup' component = {\r\n                  () => <AddTopup \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/SelectAddType' component = {\r\n                  () => <SelectAddType \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Login' component = {\r\n                  () => <Login \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Logout' component = {\r\n                  () => <Logout \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Edit' component = {\r\n                  () => <Edit \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Settings' component = {\r\n                  () => <Settings \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/About' component = {\r\n                  () => <About \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Register' component = {\r\n                  () => <Register \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Redirect from=\"*\" to=\"/\" />\r\n              </Switch>\r\n\r\n              <Footer />\r\n\r\n            </div>\r\n        </HashRouter>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}