{"version":3,"sources":["store.js","reducers/ProgramReducers.js","reduxtypes.js","reducers/UserDataReducers.js","actions/UserDataActions.js","routes/AddBroker.js","routes/AddTopup.js","actions/ProgramActions.js","routes/AddWithdraw.js","routes/AddBuy.js","routes/AddSell.js","routes/AddFX.js","routes/AddFee.js","routes/AddDividend.js","routes/SelectAddType.js","routes/Edit.js","routes/Home.js","routes/Login.js","routes/Logout.js","components/Ribbon.js","components/Notes.js","components/Log.js","components/TopupWithdraw.js","components/DataTable.js","routes/Portfolio.js","routes/Settings.js","routes/About.js","routes/Register.js","components/Menu.js","components/Nav.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","portfolioNameToShow","state","action","type","name","payload","topupStyle","brokers","user1","logs","applyMiddleware","thunk","addToBrokers","oldBrokers","newBroker","dispatch","fetchLogs","id","b1","log","b2","b3","console","AddBroker","props","value","handleChange","bind","handleSubmit","event","this","setState","target","brokerToAdd","replace","c","r","Math","random","toString","substring","preventDefault","updateScreenName","className","onSubmit","onChange","Component","connect","AddTopup","amountSent","rate","amountLanded","notes","getTopupForm_TYPE_CONVERT","getTopupForm_TYPE_NATIVE","handleChangeAmountSent","handleChangeAmountLanded","handleChangeConversionRate","handleChangeNotes","fetchTopupStyle","portfolio","currency","formToShow","currentBroker","i","length","SelectAddType","liClassName","to","Edit","Home","fetchPortfolioNameToShow","undefined","map","broker","key","onClick","updatePortfolioNameToShow","renderBrokers","fetchBrokers","Login","Logout","Ribbon","currentTab","tabs","tab","updateCurrentTab","tabName","getTabs","Notes","isModalVisibleClass","isVisible","closeNotes","Log","showNotes","data","entry","pkey","period","openNotes","notes1","actionStringClassName","includes","date","ticker","bought","sold","getData","TopupWithdraw","amountAUD","amountUSD","notes2","DataTable","a","showTable","Portfolio","Settings","About","Register","Menu","toggleMenu","Nav","title","backBtnClassName","menuClassName","isMenuHidden","screen","Footer","App","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b42cfda4.chunk.js","sourcesContent":["import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Reducers\r\nimport { brokersReducer, logsReducer } from './reducers/UserDataReducers';\r\nimport { portfolioNameToShowReducer, topupStyleReducer } from './reducers/ProgramReducers';\r\n\r\nconst initialState = {};\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    combineReducers({\r\n        // Program Data\r\n        portfolioNameToShow: portfolioNameToShowReducer,\r\n        topupStyle: topupStyleReducer,\r\n\r\n        // User Data\r\n        brokers: brokersReducer,\r\n        logs: logsReducer\r\n    }),\r\n    initialState,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n    );\r\n\r\nexport default store;","import { \r\n    FETCH_PORTFOLIO_NAME_TO_SHOW,\r\n    UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n    FETCH_TOPUPSTYLE\r\n} from \"../reduxtypes\";\r\n\r\nexport const portfolioNameToShowReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case FETCH_PORTFOLIO_NAME_TO_SHOW:\r\n            return { name: action.payload };\r\n        case UPDATE_PORTFOLIO_NAME_TO_SHOW:\r\n            return { name: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const topupStyleReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case FETCH_TOPUPSTYLE:\r\n            return { topupStyle: action.payload };\r\n        default: \r\n            return state;\r\n    }\r\n};","// Program Data\r\nexport const FETCH_PORTFOLIO_NAME_TO_SHOW = \"FETCH_PORTFOLIO_NAME_TO_SHOW\";\r\nexport const UPDATE_PORTFOLIO_NAME_TO_SHOW = \"UPDATE_PORTFOLIO_NAME_TO_SHOW\";\r\nexport const FETCH_TOPUPSTYLE = \"FETCH_TOPUPSTYLE\"; // FROM CURRENT BROKER\r\n\r\n// User Data\r\nexport const FETCH_BROKERS = \"FETCH_BROKERS\";\r\nexport const ADD_TO_BROKERS = \"ADD_TO_BROKERS\";\r\nexport const FETCH_LOGS = \"FETCH_LOGS\";\r\nexport const ADD_TO_LOGS = \"ADD_TO_LOGS\";","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from \"../reduxtypes\";\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n\r\nexport const brokersReducer = (state = {brokers: user1.brokers}, action) => { // state = {}\r\n    switch(action.type){\r\n        case FETCH_BROKERS:\r\n            return { brokers: action.payload };\r\n        case ADD_TO_BROKERS:\r\n            return { brokers: action.payload };\r\n        default:\r\n            // retrieving the default store from mock data for the front end mvp app, when we have backend API, state={}\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const logsReducer = ( state = {}, action ) => {\r\n    switch(action.type){\r\n        case FETCH_LOGS:\r\n            return { logs: action.payload };\r\n        default: \r\n            return state;\r\n    }\r\n}","import { \r\n    FETCH_BROKERS,\r\n    ADD_TO_BROKERS,\r\n    FETCH_LOGS,\r\n    ADD_TO_LOGS\r\n} from '../reduxtypes';\r\n\r\nimport user1 from '../mockdata/user1'; // Mock/Fake DB\r\n// In order to CRUD this mock data, we need to create a local copy within redux store - phase1=brokers, phase2=logs\r\n// so 1. we have local copy data\r\n// 2. when we have backend api and db, no longer local changes\r\n\r\n// We will use this in the future when making backend API calls // phase1\r\nexport const fetchBrokers = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_BROKERS,\r\n        payload: user1.brokers\r\n    });\r\n}\r\n\r\nexport const addToBrokers = (oldBrokers, newBroker) => dispatch => { // We are only adding the new broker to the local client redux front end store (will be different when we have backend API)\r\n    dispatch({\r\n        type: ADD_TO_BROKERS,\r\n        payload: [\r\n            ...oldBrokers,\r\n            newBroker\r\n        ]\r\n    });\r\n}\r\n\r\nexport const fetchLogs = (id) => dispatch => {\r\n    switch(id){\r\n        case \"Interactive Brokers\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b1.log\r\n            });\r\n            break;\r\n        case \"Hatch\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b2.log\r\n            });\r\n            break;\r\n        case \"Sharsies\":\r\n            dispatch({\r\n                type: FETCH_LOGS,\r\n                payload: user1.b3.log\r\n            });\r\n            break;\r\n        default:\r\n            dispatch({\r\n                type: FETCH_LOGS, // TODO: have error throwing reducer\r\n                payload: [{\r\n                    \"type\": \"start\",\r\n                    \"period\": \"Error - User does not have that portfolio / any entries within that portfolio\"\r\n                }]\r\n            })\r\n            console.log(\">> ID DOES NOT EXIST\");\r\n            break;\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    addToBrokers\r\n} from '../actions/UserDataActions';\r\n\r\nclass AddBroker extends Component{\r\n\r\n    // this.props.addBroker()\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        function uuidv4() {\r\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n              return v.toString(16);\r\n            });\r\n        }\r\n\r\n        let brokerToAdd = {\r\n            name: this.state.value,\r\n            id: uuidv4().substring(0, 8)\r\n        }\r\n        \r\n        this.props.addToBrokers(this.props.brokers, brokerToAdd);\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"addBroker\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"addBroker\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddData AddBroker Screen\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Enter Broker <br/><br/>\r\n                        <input type=\"text\" name=\"name\" value={this.state.value} onChange={this.handleChange} className=\"AddDataTextBox\"/>\r\n                    </label>\r\n                    <br/><br/>\r\n                    <p className=\"msg\"> Broker Portfolio Deletion in Settings (Todo: 1. Delete All Data, or 2. Hide from Home) </p>\r\n                    <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n                </form> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        addToBrokers\r\n    }\r\n)(AddBroker);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../styles/AddDataScreens.css';\r\n\r\n// Redux\r\nimport { \r\n    fetchTopupStyle\r\n} from '../actions/ProgramActions';\r\n\r\nclass AddTopup extends Component{\r\n\r\n    // this.props.\r\n\r\n    // Other Notes\r\n    // There are 2 types of topups (so far...)\r\n    // 1. Native (IBKR, Sharsies)\r\n    // 2. Convert (Hatch)\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            action: 'Topup', // TODO: Change to Parameter string from external json constants\r\n            amountSent: '',\r\n            rate: '',\r\n            amountLanded: '',\r\n            notes: '' // TODO: Handle notes1 or notes2 - did we arrive on AddTopup Section via log ribbon OR topup/withdraw ribbon ?\r\n        }\r\n\r\n        this.getTopupForm_TYPE_CONVERT = this.getTopupForm_TYPE_CONVERT.bind(this);\r\n        this.getTopupForm_TYPE_NATIVE = this.getTopupForm_TYPE_NATIVE.bind(this);\r\n        this.handleChangeAmountSent = this.handleChangeAmountSent.bind(this);\r\n        this.handleChangeAmountLanded = this.handleChangeAmountLanded.bind(this);\r\n        this.handleChangeConversionRate = this.handleChangeConversionRate.bind(this);\r\n        this.handleChangeNotes = this.handleChangeNotes.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChangeNotes(event){\r\n        this.setState({notes: event.target.value});\r\n    }\r\n\r\n    handleChangeConversionRate(event){\r\n        this.setState({rate: event.target.value});\r\n    }\r\n\r\n    handleChangeAmountLanded(event){\r\n        this.setState({amountLanded: event.target.value});\r\n    }\r\n\r\n    handleChangeAmountSent(event){\r\n        this.setState({amountSent: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        console.log(this.state.amountSent);\r\n        console.log(this.state.rate);\r\n        console.log(this.state.amountLanded);\r\n        console.log(this.state.notes);\r\n\r\n        if(this.props.topupStyle === 'native'){\r\n        }\r\n        else if(this.props.topupStyle === 'convert'){\r\n        }\r\n        else{\r\n\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.fetchTopupStyle(this.props.brokers, this.props.portfolio); // This will be buggy af - assuiming we only access AddTopup after choosing a portfolio - URL injection will crash\r\n        this.props.updateScreenName(\"AddTopup\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddTopup\"); // todo1: create constants\r\n    }\r\n\r\n    // TODO: Add Number Validations\r\n    getTopupForm_TYPE_NATIVE(currency){\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                \r\n                Topup Amount ({currency})\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountLanded\" value={this.state.amountLanded} onChange={this.handleChangeAmountLanded} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                Notes\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountLanded\" value={this.state.notes} onChange={this.handleChangeNotes} className=\"AddDataTextBox\"/>\r\n            \r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form> \r\n    }\r\n\r\n    // TODO: Add Number Validations\r\n    getTopupForm_TYPE_CONVERT(currency){\r\n        return <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                \r\n                Amount sent \r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountSent\" value={this.state.amountSent} onChange={this.handleChangeAmountSent} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                Conversion Rate \r\n                <br/><br/>\r\n                <input type=\"text\" name=\"rate\" value={this.state.rate} onChange={this.handleChangeConversionRate} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n                \r\n                Amount Recieved ({currency})\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountLanded\" value={this.state.amountLanded} onChange={this.handleChangeAmountLanded} className=\"AddDataTextBox\"/>\r\n                <br/><br/>\r\n\r\n                Notes\r\n                <br/><br/>\r\n                <input type=\"text\" name=\"amountLanded\" value={this.state.notes} onChange={this.handleChangeNotes} className=\"AddDataTextBox\"/>\r\n\r\n            </label>\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Add\" className=\"submit-btn\" />\r\n        </form>\r\n    }\r\n\r\n    render(){\r\n\r\n        // TODO: add Base Currency to user1 data against the broker\r\n        let currency = '';\r\n        if(this.props.portfolio === 'Interactive Brokers'){\r\n            currency = 'AUD';\r\n        }\r\n        else if(this.props.portfolio === 'Hatch'){\r\n            currency = 'USD';\r\n        }\r\n        else if(this.props.portfolio === 'Sharsies'){\r\n            currency = 'NZD';\r\n        }\r\n        \r\n        let formToShow;\r\n        if(this.props.topupStyle === 'native'){\r\n            formToShow = () => this.getTopupForm_TYPE_NATIVE(currency);\r\n        }\r\n        else if(this.props.topupStyle === 'convert'){\r\n            formToShow = () => this.getTopupForm_TYPE_CONVERT(currency);\r\n        }\r\n        else{\r\n            console.log('>> THAT TOPUP STYLE DOES NOT EXIST');\r\n            formToShow = () => <div> ERROR </div>;\r\n        }\r\n\r\n        return(\r\n            <div className=\"AddData AddTopup Screen\">\r\n                <h4>{this.props.portfolio}</h4>\r\n                {formToShow()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        portfolio: state.portfolioNameToShow.name,\r\n        brokers: state.brokers.brokers,\r\n        topupStyle: state.topupStyle.topupStyle\r\n    }),\r\n    {\r\n        fetchTopupStyle\r\n    }\r\n)(AddTopup);","import { \r\n    FETCH_PORTFOLIO_NAME_TO_SHOW, \r\n    UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n    FETCH_TOPUPSTYLE\r\n} from '../reduxtypes';\r\n\r\nexport const fetchPortfolioNameToShow = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_PORTFOLIO_NAME_TO_SHOW,\r\n        payload: \"redux-default\"\r\n    });\r\n}\r\n\r\nexport const updatePortfolioNameToShow = (portfolioNameToShow) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_PORTFOLIO_NAME_TO_SHOW,\r\n        payload: portfolioNameToShow\r\n    });\r\n}\r\n\r\nexport const fetchTopupStyle = (brokers, currentBroker) => dispatch => { // TODO Test action, heavily exposed to bugs\r\n    let topupStyle = '';\r\n    for(let i = 0; i < brokers.length; i++){\r\n        if(brokers[i].name === currentBroker){ // TODO Create Broker Name <> ID Converter \r\n            topupStyle = brokers[i].topupStyle;\r\n        }\r\n    }\r\n\r\n    dispatch({\r\n        type: FETCH_TOPUPSTYLE,\r\n        payload: topupStyle\r\n    });\r\n}","import React, {Component} from 'react';\r\n\r\nclass AddWithdraw extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddWithdraw\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddWithdraw\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddWithdraw Screen\">\r\n                AddWithdraw works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddWithdraw;","import React, {Component} from 'react';\r\n\r\nclass AddBuy extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddBuy\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddBuy\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddBuy Screen\">\r\n                AddBuy works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddBuy;","import React, {Component} from 'react';\r\n\r\nclass AddSell extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddSell\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddSell\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddSell Screen\">\r\n                AddSell works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddSell;","import React, {Component} from 'react';\r\n\r\nclass AddFX extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddFX\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddFX\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddFX Screen\">\r\n                AddFX works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddFX;","import React, {Component} from 'react';\r\n\r\nclass AddFee extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddFee\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddFee\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddFee Screen\">\r\n                AddFee works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddFee;","import React, {Component} from 'react';\r\n\r\nclass AddDividend extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"AddDividend\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"AddDividend\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"AddDividend Screen\">\r\n                AddDividend works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddDividend;","import React, {Component} from 'react';\r\nimport '../styles/SelectAddType.css';\r\n\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\n\r\nclass SelectAddType extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"selectaddtype\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"selectaddtype\"); // todo1: create constants\r\n    }\r\n\r\n    // TODO: Enumerate in external constants file\r\n    render(){\r\n        let liClassName = \"SelectAddType-li\";\r\n        return(\r\n            <div className=\"SelectAddType Screen\">\r\n                <h4> Select Type of Log </h4>\r\n                <ul className=\"SelectAddType-ul\">\r\n                    <Link to={'/AddTopup'}><li className={liClassName+\" AddTopup-li\"}> 1. Topup </li></Link>\r\n                    <Link to={'/AddWithdraw'}><li className={liClassName+\" AddWithdraw-li\"}> 2. Withdraw </li></Link>\r\n                    <Link to={'/AddFX'}><li className={liClassName+\" AddFX-li\"}> 3. FX </li></Link>\r\n                    <Link to={'/AddBuy'}><li className={liClassName+\" AddBuy-li\"}> 4. Buy </li></Link>\r\n                    <Link to={'/AddSell'}><li className={liClassName+\" AddSell-li\"}> 5. Sell </li></Link>\r\n                    <Link to={'/AddDividend'}><li className={liClassName+\" AddDividend-li\"}> 6. Dividend </li></Link>\r\n                    <Link to={'/AddFee'}><li className={liClassName+\" AddFee-li\"}> 7. Fee </li></Link>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectAddType;","import React, {Component} from 'react';\r\n\r\nclass Edit extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Edit Screen\">\r\n                Edit works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Edit;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Home.css';\r\n\r\n// Redux\r\nimport { \r\n    fetchBrokers, \r\n    addToBrokers,\r\n    fetchLogs\r\n} from '../actions/UserDataActions';\r\n\r\nimport { \r\n    fetchPortfolioNameToShow, \r\n    updatePortfolioNameToShow \r\n} from '../actions/ProgramActions';\r\n\r\nclass Home extends Component{\r\n\r\n    // this.props.<redux>\r\n    // this.props.updateScreenName()\r\n    // this.props.brokers\r\n\r\n    componentDidMount(){\r\n        // this.props.fetchBrokers(); // To use when we have backend API implemented\r\n        this.props.fetchPortfolioNameToShow();\r\n        // this.props.fetchLogs();\r\n        this.props.updateScreenName(\"home\");\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"home\"); // todo1: create constants\r\n    }\r\n\r\n    renderBrokers(){\r\n        if(this.props.brokers === undefined) return \"Loading Brokers\";\r\n        \r\n        return this.props.brokers.map( (broker, i) => {\r\n            return <ul key={i} className=\"Brokers\">\r\n                <Link to={'/Portfolio'}>\r\n                    <li onClick={ () => this.props.updatePortfolioNameToShow(broker.name)} className=\"Broker\">{broker.name}</li>\r\n                </Link>\r\n            </ul>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Home Screen\">\r\n                <div className=\"Brokers\">\r\n                    {this.renderBrokers()}\r\n                </div>\r\n                <div className=\"AddBrokerBtn-wrapper\">\r\n                    <Link to={'/AddBroker'}>\r\n                        <button className=\"AddBtn\">+</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        brokers: state.brokers.brokers\r\n    }),\r\n    {\r\n        fetchPortfolioNameToShow, updatePortfolioNameToShow,\r\n        fetchBrokers, addToBrokers, fetchLogs\r\n    }\r\n)(Home);","import React, {Component} from 'react';\r\n\r\nclass Login extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"login\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"login\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Login Screen\">\r\n                Login works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\n\r\nclass Logout extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"logout\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"logout\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Logout Screen\">\r\n                Logout works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logout;","import React, {Component} from 'react';\r\nimport '../styles/Ribbon.css';\r\n\r\nclass Ribbon extends Component {\r\n\r\n    // this.props.updateCurrentTab()\r\n    // this.props.currentTab\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentTab: \"\",\r\n            tabs: [ // todo: Get from user data\r\n                \"Master\",\r\n                \"Holdings\",\r\n                \"Log\",\r\n                \"Topup / Withdraw\",\r\n                \"Buy / Sell\",\r\n                \"Fees\",\r\n                \"Dividends\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.state.currentTab !== this.props.currentTab) this.setState({currentTab: this.props.currentTab});\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n        this.props.updateCurrentTab(tab);\r\n    }\r\n\r\n    getTabs(){\r\n        let defaultClass = \"Tab-inner \";\r\n        let highlightedClass = \" Tab-inner-highlighted\";\r\n        return this.state.tabs.map((tabName, i) => {\r\n            return <li onClick={ () => this.updateCurrentTab(tabName)} className=\"Tab\" key={i}>\r\n                <span className={defaultClass + (tabName === this.state.currentTab ? highlightedClass : \"\")}>{tabName}</span>\r\n            </li>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Ribbon\">\r\n                <ul className=\"Tabs\">\r\n                    {this.getTabs()}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ribbon;","import React, {Component} from 'react';\r\nimport '../styles/Notes.css';\r\n\r\nexport default class Notes extends Component {\r\n    \r\n    // this.props.notes\r\n    // this.props.isVisible\r\n    // this.props.closeNotes\r\n\r\n    render(){\r\n        let isModalVisibleClass = this.props.isVisible ? \" Notes \" : \" Notes-hide \";\r\n\r\n        return(\r\n            <div className={isModalVisibleClass}>\r\n                <div className=\" Notes-exit \" onClick={this.props.closeNotes}>\r\n                    x\r\n                </div>\r\n                <div className=\"Notes-content\">\r\n                    {this.props.notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/DataTable.css';\r\n\r\n// Components \r\nimport Notes from './Notes';\r\n\r\nclass Log extends Component {\r\n    \r\n    // this.props.data\r\n    // this.props.portfolio\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: \"\"\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getData(){\r\n        if(this.props.data === undefined) return <tr><td>must fetch first</td></tr>;\r\n\r\n        return this.props.data.map( (entry, i) => {\r\n            if(entry.type === \"start\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"reg\"){\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"BUY\")){\r\n                    actionStringClassName = \" Buy \";\r\n                }\r\n                else if(entry.action.includes(\"SELL\")){\r\n                    actionStringClassName = \" Sell \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"Dividend\")){\r\n                    actionStringClassName = \" Dividend \";\r\n                }\r\n                else if(entry.action.includes(\"Fee\")){\r\n                    actionStringClassName = \" Fee \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    \r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    \r\n                    <td>{entry.ticker}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end1\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>BOUGHT</b></td>\r\n                    <td>{entry.bought}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else if(entry.type === \"end2\"){\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td></td>\r\n                    <td><b>SOLD</b></td>\r\n                    <td>{entry.sold}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n                </tr>\r\n            }\r\n            else{\r\n                // This can be here since log captures ALL types of activity\r\n                console.log(\"> ERROR: LOG TYPE DOES NOT EXIST: \" + entry.type);\r\n                return <tr><td>ERROR</td></tr>;\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ref</th>\r\n                            <th>Date</th>\r\n                            <th>Action</th>\r\n                            <th>Symbol</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getData()}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <Link to={'/SelectAddType'}>\r\n                    <div className=\"AddLogBtn-wrapper\">\r\n                        <button className=\"AddBtn\">+</button>\r\n                    </div>\r\n                </Link>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Log;","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\nimport Notes from './Notes';\r\n\r\nclass TopupWithdraw extends Component{\r\n\r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            showNotes: false,\r\n            notes: \"\"\r\n        }\r\n    }\r\n\r\n    closeNotes(){\r\n        this.setState({showNotes: false});\r\n    }\r\n\r\n    openNotes(notes){\r\n        this.setState({showNotes: true, notes});\r\n    }\r\n\r\n    getData(){\r\n        if(this.props.data === undefined) return <tr>\r\n                <td>Must</td>\r\n                <td>Fetch</td>\r\n                <td>First</td>\r\n                <td>From</td>\r\n                <td>The</td>\r\n                <td>User</td>\r\n                <td>ok</td>\r\n            </tr>\r\n\r\n        return this.props.data.map ((entry, i) => {\r\n            if(entry.type === \"end1\" || entry.type === \"end2\") {\r\n                // Continue;\r\n            }\r\n            else if(entry.type === \"start\"){ // TODO: REFACTOR START ROWS\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td><b>{entry.period}</b></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes1)}> x </td>\r\n            </tr>\r\n            }\r\n            else if(entry.action.includes(\"Topup\") ||\r\n            entry.action.includes(\"Withdraw\") ||\r\n            entry.action.includes(\"FX\")){ // TODO: KEEP CONSTANTS AND SCHEMA AS CASE SENSITIVE\r\n                let actionStringClassName = \" \"; // TODO: REFACTOR ACROSS ALL SCREENS\r\n\r\n                if(entry.action.includes(\"Topup\")){\r\n                    actionStringClassName = \" Topup \";\r\n                }\r\n                else if(entry.action.includes(\"Withdraw\")){\r\n                    actionStringClassName = \" Withdraw \";\r\n                }\r\n                else if(entry.action.includes(\"FX\")){\r\n                    actionStringClassName = \" FX \";\r\n                }\r\n                \r\n\r\n                // TODO: IBKR HATCH AND SHARIES WILL HAVE DIFFERENT FORMAT\r\n                // --.amountAUD no longer applies here\r\n                // 1. native topup 2. convert topup\r\n                return <tr key={i}>\r\n                    <td>{entry.pkey}</td>\r\n                    <td>{entry.date}</td>\r\n                    <td className={actionStringClassName}>{entry.action}</td>\r\n                    <td>{entry.amountAUD}</td>\r\n                    <td>{entry.rate}</td>\r\n                    <td>{entry.amountUSD}</td>\r\n                    <td className=\"OpenNotes\" onClick={ () => this.openNotes(entry.notes2)}> x </td>\r\n                </tr>\r\n            }\r\n\r\n            // return something\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div>\r\n                    <p>Total AUD= </p>\r\n                    <p>Total USD= </p>\r\n                </div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Ref</th>\r\n                            <th className=\"Date-topup-withdraw\">Date</th>\r\n                            <th>Action</th>\r\n                            <th>AUD</th>\r\n                            <th>Rate</th>\r\n                            <th>USD</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getData()}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"AddLog\">\r\n                    ADD + // go direct to addTopupWithdraw page\r\n                </div>\r\n                \r\n                <Notes notes={this.state.notes} isVisible={this.state.showNotes} closeNotes={this.closeNotes.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopupWithdraw;","import React, {Component} from 'react';\r\nimport '../styles/DataTable.css';\r\n\r\n// Components\r\nimport Log from './Log';\r\nimport TopupWithdraw from './TopupWithdraw';\r\n\r\nclass DataTable extends Component {\r\n\r\n    // this.props.currentTab\r\n    // this.props.data\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            a: 1\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let showTable = () => { return \"n/a\" };\r\n    \r\n        switch(this.props.currentTab){\r\n            case \"Log\":\r\n                showTable = () => { return <Log data={this.props.data}/> }\r\n                break;\r\n            case \"Topup / Withdraw\":\r\n                showTable = () => { return <TopupWithdraw data={this.props.data}/> }\r\n                break;\r\n            default:\r\n                showTable = () => { return \"Invalid Choice\" }\r\n                break;\r\n        }\r\n\r\n        return(\r\n            <div className=\"DataTable\">\r\n                {showTable()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataTable;","// Packages\r\nimport React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Portfolio.css';\r\n\r\n// Redux\r\nimport {\r\n    fetchLogs\r\n} from '../actions/UserDataActions';\r\n\r\n\r\n// Components\r\nimport Ribbon from '../components/Ribbon';\r\nimport DataTable from '../components/DataTable';\r\n\r\nclass Portfolio extends Component{\r\n\r\n    // this.props.<redux>\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTab: \"Log\"\r\n        }\r\n    }\r\n\r\n    updateCurrentTab(tab){\r\n        this.setState({currentTab: tab});\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"portfolio\"); // Hacky\r\n        this.props.fetchLogs(this.props.portfolio);\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"portfolio\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Portfolio Screen\"> \r\n                <div className=\"BrokerName\"> {this.props.portfolio} </div>\r\n                <Ribbon \r\n                currentTab={this.state.currentTab}\r\n                updateCurrentTab={this.updateCurrentTab.bind(this)} \r\n                />\r\n\r\n                <DataTable \r\n                portfolio={this.props.portfolio}\r\n                currentTab={this.state.currentTab}\r\n                data={this.props.logs}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({ \r\n        portfolio: state.portfolioNameToShow.name,\r\n        logs: state.logs.logs\r\n    }),\r\n    {\r\n        fetchLogs\r\n    }\r\n)(Portfolio);","import React, {Component} from 'react';\r\n\r\nclass Settings extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"settings\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"settings\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Settings Screen\">\r\n                Settings works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;","import React, {Component} from 'react';\r\n\r\nclass About extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"about\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"about\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"About Screen\">\r\n                About works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, {Component} from 'react';\r\n\r\nclass Register extends Component{\r\n    componentDidMount(){\r\n        this.props.updateScreenName(\"register\"); // Hacky\r\n    }\r\n    \r\n    componentDidUpdate(){\r\n        this.props.updateScreenName(\"register\"); // todo1: create constants\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Register Screen\">\r\n                Register works\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","import React, {Component} from 'react';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\nclass Menu extends Component{\r\n\r\n    // this.props.toggleMenu\r\n\r\n    render(){\r\n        let linkClassName = \"settings-link\";\r\n        return(\r\n            <div className=\"menu\">\r\n                <div onClick={this.props.toggleMenu} className=\"menu-exit-btn\"> x </div>\r\n                \r\n                <Link to={'/'}><div onClick={this.props.toggleMenu} className={linkClassName}> Home </div></Link>\r\n                <Link to={'/Settings'}><div onClick={this.props.toggleMenu} className={linkClassName}> Settings </div></Link>\r\n                <Link to={'/Login'}><div onClick={this.props.toggleMenu} className={linkClassName}> Login </div></Link>\r\n                <Link to={'/Logout'}><div onClick={this.props.toggleMenu} className={linkClassName}> Logout </div></Link>\r\n                <Link to={'/Register'}><div onClick={this.props.toggleMenu} className={linkClassName}> Register </div></Link>\r\n                <Link to={'/About'}><div onClick={this.props.toggleMenu} className={linkClassName}> About </div></Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","// Packages\r\nimport React, {Component} from 'react';\r\nimport {HashLink as Link} from 'react-router-hash-link';\r\nimport '../styles/Nav.css';\r\n\r\n// Components\r\nimport Menu from './Menu';\r\n\r\nclass Nav extends Component{\r\n    \r\n    // props\r\n    // this.props.screen\r\n    // this.props.isMenuHidden\r\n    // this.props.toggleMenu\r\n\r\n    render(){\r\n        let title;\r\n        let backBtnClassName = \" back-btn \";\r\n        let menuClassName = this.props.isMenuHidden ? \" menu-outer-hidden \" : \" menu-outer \";\r\n\r\n        if(this.props.screen === \"home\"){\r\n            title = \"Select Portfolio\";\r\n            backBtnClassName = \" back-btn-hide \";\r\n        }\r\n        else if(this.props.screen === \"portfolio\"){\r\n            title = \"Portfolio\";\r\n        }\r\n        else if(this.props.screen === \"addBroker\"){\r\n            title = \"Add Broker\";\r\n        }\r\n        else if(this.props.screen === \"login\"){\r\n            title = \"Login\";\r\n        }\r\n        else if(this.props.screen === \"logout\"){\r\n            title = \"Logout\";\r\n        }\r\n        else if(this.props.screen === \"settings\"){\r\n            title = \"Settings\";\r\n        }\r\n        else if(this.props.screen === \"register\"){\r\n            title = \"Register\";\r\n        }\r\n        else if(this.props.screen === \"about\"){\r\n            title = \"About\";\r\n        }\r\n        else if(this.props.screen === \"selectaddtype\"){\r\n            title = \"Add a Log item\";\r\n        }\r\n        else if(this.props.screen === \"AddTopup\"){\r\n            title = \"Add Topup Event\";\r\n        }\r\n\r\n        return(\r\n            <div className=\"Nav\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"col Padding\">\r\n                        <div className={backBtnClassName}>\r\n                            <Link to={'/'}>\r\n                                <div className=\"back-btn-btn\"> ↶ </div>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col Title\">\r\n                        {title}\r\n                    </div>\r\n                    <div className=\"col MenuBtn\">\r\n                        <div className=\"hamburger\" onClick={this.props.toggleMenu}> ☰ </div>\r\n                    </div>\r\n                    <div className={menuClassName}>\r\n                        <Menu\r\n                        toggleMenu={this.props.toggleMenu}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport '../styles/Footer.css';\r\n\r\nexport default function Footer(){\r\n    return(\r\n        <div className=\"Footer\">\r\n            Created by Paul / This is not a Sponsored Product / Recognized_Unrecognized © 2020\r\n        </div>\r\n    );\r\n}\r\n","// Packages\r\nimport './App.css';\r\nimport React, {Component} from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter, Switch, Route, Redirect} from 'react-router-dom';\r\n\r\n// Redux\r\nimport store from './store';\r\n\r\n// Components and Routes\r\nimport AddBroker from './routes/AddBroker';\r\nimport AddTopup from './routes/AddTopup';\r\nimport AddWithdraw from './routes/AddWithdraw';\r\nimport AddBuy from './routes/AddBuy';\r\nimport AddSell from './routes/AddSell';\r\nimport AddFX from './routes/AddFX';\r\nimport AddFee from './routes/AddFee';\r\nimport AddDividend from './routes/AddDividend';\r\nimport SelectAddType from './routes/SelectAddType';\r\nimport Edit from './routes/Edit';\r\nimport Home from './routes/Home';\r\nimport Login from './routes/Login';\r\nimport Logout from './routes/Logout';\r\nimport Portfolio from './routes/Portfolio';\r\nimport Settings from './routes/Settings';\r\nimport About from './routes/About';\r\nimport Register from './routes/Register';\r\n\r\nimport Nav from './components/Nav';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n      this.state ={\r\n        isMenuHidden: true, // TODO Move this into redux store\r\n        screen: \"home\", // TODO Move this into redux store also and connect each child Component to store\r\n      }\r\n\r\n    this.updateScreenName = this.updateScreenName.bind(this);\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n  }\r\n\r\n  toggleMenu = () => {\r\n    this.setState({isMenuHidden: !this.state.isMenuHidden});\r\n  }\r\n\r\n  updateScreenName(screen){\r\n    if(this.state.screen !== screen) this.setState({screen});\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <Provider store={store}>\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n              \r\n              <Nav \r\n              screen={this.state.screen}\r\n              isMenuHidden={this.state.isMenuHidden}\r\n              toggleMenu={this.toggleMenu}\r\n              />\r\n\r\n              <Switch>\r\n                <Route exact path='/' component = {\r\n                  () => <Home \r\n                  updateScreenName={this.updateScreenName}\r\n                  brokers={this.state.brokers}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Portfolio' component = {\r\n                  () => <Portfolio \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddBroker' component = {\r\n                  () => <AddBroker \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/AddTopup' component = {\r\n                  () => <AddTopup \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/SelectAddType' component = {\r\n                  () => <SelectAddType \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Login' component = {\r\n                  () => <Login \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Logout' component = {\r\n                  () => <Logout \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Edit' component = {\r\n                  () => <Edit \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Settings' component = {\r\n                  () => <Settings \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/About' component = {\r\n                  () => <About \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Route exact path='/Register' component = {\r\n                  () => <Register \r\n                  updateScreenName={this.updateScreenName}\r\n                  />\r\n                }/>\r\n\r\n                <Redirect from=\"*\" to=\"/\" />\r\n              </Switch>\r\n\r\n              <Footer />\r\n\r\n            </div>\r\n        </HashRouter>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}